
pulse_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a90  08004a90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a90  08004a90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000274  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227a  00000000  00000000  00031a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e60  00000000  00000000  00034c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b34  00000000  00000000  00035a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a59  00000000  00000000  000565ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc994  00000000  00000000  00069005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125999  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004158  00000000  00000000  001259ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a48 	.word	0x08004a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a48 	.word	0x08004a48

080001c8 <_ZN4CoreC1Em>:
 *      Author: alexpetrov
 */

#include <core.h>

Core::Core(uint32_t f) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	Core::freq = f;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	601a      	str	r2, [r3, #0]
}
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4618      	mov	r0, r3
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>:
	NO = 0b00, UP, DOWN,
} Pull_Mode;

class GPIO {
public:
	GPIO(GPIO_TypeDef *gpio, uint8_t pin, GPIO_Type type = INPUT,
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	60f8      	str	r0, [r7, #12]
 80001ee:	60b9      	str	r1, [r7, #8]
 80001f0:	4611      	mov	r1, r2
 80001f2:	461a      	mov	r2, r3
 80001f4:	460b      	mov	r3, r1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]
			GPIO_Pull_Mode pull = NO) {
		_gpio = gpio;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	601a      	str	r2, [r3, #0]
		_pin = pin;
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	605a      	str	r2, [r3, #4]
		_pin_mask = 1 << pin;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2201      	movs	r2, #1
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	461a      	mov	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
		_pull = pull;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	7e3a      	ldrb	r2, [r7, #24]
 800021a:	735a      	strb	r2, [r3, #13]
		_type = type;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	79ba      	ldrb	r2, [r7, #6]
 8000220:	731a      	strb	r2, [r3, #12]
	}
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	4618      	mov	r0, r3
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <_ZN4GPIO4initEv>:

	void init(void) {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
		RCC->AHBENR |= RCC_AHBENR_GPIOAEN + GPIO_GET_INDEX(_gpio);
 8000238:	4b37      	ldr	r3, [pc, #220]	; (8000318 <_ZN4GPIO4initEv+0xe8>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000244:	d01e      	beq.n	8000284 <_ZN4GPIO4initEv+0x54>
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4934      	ldr	r1, [pc, #208]	; (800031c <_ZN4GPIO4initEv+0xec>)
 800024c:	428b      	cmp	r3, r1
 800024e:	d017      	beq.n	8000280 <_ZN4GPIO4initEv+0x50>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4932      	ldr	r1, [pc, #200]	; (8000320 <_ZN4GPIO4initEv+0xf0>)
 8000256:	428b      	cmp	r3, r1
 8000258:	d00f      	beq.n	800027a <_ZN4GPIO4initEv+0x4a>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4931      	ldr	r1, [pc, #196]	; (8000324 <_ZN4GPIO4initEv+0xf4>)
 8000260:	428b      	cmp	r3, r1
 8000262:	d008      	beq.n	8000276 <_ZN4GPIO4initEv+0x46>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	492f      	ldr	r1, [pc, #188]	; (8000328 <_ZN4GPIO4initEv+0xf8>)
 800026a:	428b      	cmp	r3, r1
 800026c:	d101      	bne.n	8000272 <_ZN4GPIO4initEv+0x42>
 800026e:	4b2f      	ldr	r3, [pc, #188]	; (800032c <_ZN4GPIO4initEv+0xfc>)
 8000270:	e00a      	b.n	8000288 <_ZN4GPIO4initEv+0x58>
 8000272:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <_ZN4GPIO4initEv+0x100>)
 8000274:	e008      	b.n	8000288 <_ZN4GPIO4initEv+0x58>
 8000276:	4b2f      	ldr	r3, [pc, #188]	; (8000334 <_ZN4GPIO4initEv+0x104>)
 8000278:	e006      	b.n	8000288 <_ZN4GPIO4initEv+0x58>
 800027a:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 800027e:	e003      	b.n	8000288 <_ZN4GPIO4initEv+0x58>
 8000280:	4b2d      	ldr	r3, [pc, #180]	; (8000338 <_ZN4GPIO4initEv+0x108>)
 8000282:	e001      	b.n	8000288 <_ZN4GPIO4initEv+0x58>
 8000284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000288:	4923      	ldr	r1, [pc, #140]	; (8000318 <_ZN4GPIO4initEv+0xe8>)
 800028a:	4313      	orrs	r3, r2
 800028c:	614b      	str	r3, [r1, #20]

		_gpio->PUPDR &= ~(0b11 << (_pin << 1));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	2103      	movs	r1, #3
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	43db      	mvns	r3, r3
 80002a2:	4619      	mov	r1, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	400a      	ands	r2, r1
 80002aa:	60da      	str	r2, [r3, #12]
		_gpio->PUPDR |= _pull << (_pin << 1);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	7b5b      	ldrb	r3, [r3, #13]
 80002b6:	4619      	mov	r1, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	4619      	mov	r1, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	60da      	str	r2, [r3, #12]

		_gpio->MODER &= ~(0b11 << (_pin << 1));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	2103      	movs	r1, #3
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	43db      	mvns	r3, r3
 80002e0:	4619      	mov	r1, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	400a      	ands	r2, r1
 80002e8:	601a      	str	r2, [r3, #0]
		_gpio->MODER |= _type << (_pin << 1);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	7b1b      	ldrb	r3, [r3, #12]
 80002f4:	4619      	mov	r1, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000300:	4619      	mov	r1, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	430a      	orrs	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
	}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	48000400 	.word	0x48000400
 8000320:	48000800 	.word	0x48000800
 8000324:	48000c00 	.word	0x48000c00
 8000328:	48001000 	.word	0x48001000
 800032c:	00020004 	.word	0x00020004
 8000330:	00020005 	.word	0x00020005
 8000334:	00020003 	.word	0x00020003
 8000338:	00020001 	.word	0x00020001

0800033c <_ZN4GPIO3setEb>:

	void set(bool val) {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
		if (val)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d009      	beq.n	8000362 <_ZN4GPIO3setEb+0x26>
			_gpio->ODR |= _pin_mask;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	6959      	ldr	r1, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	430a      	orrs	r2, r1
 800035e:	615a      	str	r2, [r3, #20]
		else
			_gpio->ODR &= ~_pin_mask;
	}
 8000360:	e009      	b.n	8000376 <_ZN4GPIO3setEb+0x3a>
			_gpio->ODR &= ~_pin_mask;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	6959      	ldr	r1, [r3, #20]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	43da      	mvns	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	400a      	ands	r2, r1
 8000374:	615a      	str	r2, [r3, #20]
	}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <_ZN4GPIO3getEv>:
	bool get(void) {
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
		return _gpio->IDR & _pin_mask;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	691a      	ldr	r2, [r3, #16]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4013      	ands	r3, r2
 8000396:	2b00      	cmp	r3, #0
 8000398:	bf14      	ite	ne
 800039a:	2301      	movne	r3, #1
 800039c:	2300      	moveq	r3, #0
 800039e:	b2db      	uxtb	r3, r3
	}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <_ZN7StepperC1EtP11TIM_TypeDefP4GPIOS3_>:
	int32_t set_pos = 0;
	int32_t start_pos, end_pos;
	bool dir = 0;
	uint32_t max_speed = _steps * 10;

	Stepper(uint16_t steps, TIM_TypeDef *tim, GPIO *dir, GPIO *en) {
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	607a      	str	r2, [r7, #4]
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	460b      	mov	r3, r1
 80003ba:	817b      	strh	r3, [r7, #10]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2200      	movs	r2, #0
 80003cc:	741a      	strb	r2, [r3, #16]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003d2:	461a      	mov	r2, r3
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	461a      	mov	r2, r3
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80003e8:	849a      	strh	r2, [r3, #36]	; 0x24
		_en_io = en;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	621a      	str	r2, [r3, #32]
		_dir_io = dir;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	61da      	str	r2, [r3, #28]
		_tim = tim;
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	619a      	str	r2, [r3, #24]

		_steps = steps;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	897a      	ldrh	r2, [r7, #10]
 8000400:	849a      	strh	r2, [r3, #36]	; 0x24
	}
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4618      	mov	r0, r3
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <_ZN7Stepper4initEv>:
	void init(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
		_en_io->init();		// init enable gpio
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	6a1b      	ldr	r3, [r3, #32]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff07 	bl	8000230 <_ZN4GPIO4initEv>
		_dir_io->init();		// init direction gpio
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff02 	bl	8000230 <_ZN4GPIO4initEv>

		_tim->CCER |= 1;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	6a1a      	ldr	r2, [r3, #32]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f042 0201 	orr.w	r2, r2, #1
 800043a:	621a      	str	r2, [r3, #32]
		_tim->DIER |= 1;	// enable tim update irq
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	68da      	ldr	r2, [r3, #12]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f042 0201 	orr.w	r2, r2, #1
 800044a:	60da      	str	r2, [r3, #12]
		_enable();
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f87e 	bl	800054e <_ZN7Stepper7_enableEv>
	}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <_ZN7Stepper6setPosEl15Stepper_PosType>:
	void setPos(int32_t pos, Stepper_PosType pos_type = ABSOLUTE){
 800045a:	b580      	push	{r7, lr}
 800045c:	b084      	sub	sp, #16
 800045e:	af00      	add	r7, sp, #0
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	60b9      	str	r1, [r7, #8]
 8000464:	4613      	mov	r3, r2
 8000466:	71fb      	strb	r3, [r7, #7]
		pos <<= 1;
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	60bb      	str	r3, [r7, #8]
		if (pos_type == RELATIVE){
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d104      	bne.n	800047e <_ZN7Stepper6setPosEl15Stepper_PosType+0x24>
			pos += this->set_pos;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	4413      	add	r3, r2
 800047c:	60bb      	str	r3, [r7, #8]
		}
		//uint16_t arr, psc;
		//uint32_t a = core.freq / abs(velocity);
		//a+=1;
		if (pos < 0)
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	2b00      	cmp	r3, #0
 8000482:	da03      	bge.n	800048c <_ZN7Stepper6setPosEl15Stepper_PosType+0x32>
			dir = 1;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	2201      	movs	r2, #1
 8000488:	741a      	strb	r2, [r3, #16]
 800048a:	e002      	b.n	8000492 <_ZN7Stepper6setPosEl15Stepper_PosType+0x38>
		else
			dir = 0;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2200      	movs	r2, #0
 8000490:	741a      	strb	r2, [r3, #16]
		this->start_pos = this->set_pos;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	685a      	ldr	r2, [r3, #4]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	609a      	str	r2, [r3, #8]
		this->end_pos = pos;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	60da      	str	r2, [r3, #12]
		//s = end_pos - start_pos;
		_dir_io->set(dir);
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	7c1b      	ldrb	r3, [r3, #16]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4610      	mov	r0, r2
 80004ac:	f7ff ff46 	bl	800033c <_ZN4GPIO3setEb>
		this->set_pos = pos;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	605a      	str	r2, [r3, #4]
		this->_enable();
 80004b6:	68f8      	ldr	r0, [r7, #12]
 80004b8:	f000 f849 	bl	800054e <_ZN7Stepper7_enableEv>
	}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <_ZN7Stepper8setSpeedEl>:
	void setSpeed(int32_t speed){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
		_tim->PSC = core.freq / (2 * _tim->ARR * speed);
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <_ZN7Stepper8setSpeedEl+0x34>)
 80004d0:	6819      	ldr	r1, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	fb02 f303 	mul.w	r3, r2, r3
 80004de:	005a      	lsls	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80004e8:	629a      	str	r2, [r3, #40]	; 0x28
	}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000028 	.word	0x20000028

080004fc <_ZN7Stepper11irq_handlerEv>:
		return 0;
	}
	uint16_t get_deg(void){
		return pos % _steps * 360 / _steps;
	}
	void irq_handler(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
		pos += dir ? -1 : 1;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	7c12      	ldrb	r2, [r2, #16]
 800050c:	2a00      	cmp	r2, #0
 800050e:	d002      	beq.n	8000516 <_ZN7Stepper11irq_handlerEv+0x1a>
 8000510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000514:	e000      	b.n	8000518 <_ZN7Stepper11irq_handlerEv+0x1c>
 8000516:	2201      	movs	r2, #1
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
		if ((dir ? -1 : 1) * (pos - set_pos) >= 0)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7c1b      	ldrb	r3, [r3, #16]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <_ZN7Stepper11irq_handlerEv+0x30>
 8000526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800052a:	e000      	b.n	800052e <_ZN7Stepper11irq_handlerEv+0x32>
 800052c:	2301      	movs	r3, #1
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	6811      	ldr	r1, [r2, #0]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	6852      	ldr	r2, [r2, #4]
 8000536:	1a8a      	subs	r2, r1, r2
 8000538:	fb02 f303 	mul.w	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	db02      	blt.n	8000546 <_ZN7Stepper11irq_handlerEv+0x4a>
			_disable();
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f815 	bl	8000570 <_ZN7Stepper8_disableEv>
			if (start_pos + s > pos)
				_tim->PSC -= 10;
			else
				_tim->PSC += 10;
		}*/
	}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_ZN7Stepper7_enableEv>:

	Stepper_Status _status;
	bool _ready;

protected:
	void _enable(void) {
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
		_en_io->set(false);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff feed 	bl	800033c <_ZN4GPIO3setEb>
		_start_step();
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f815 	bl	8000592 <_ZN7Stepper11_start_stepEv>
	}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_ZN7Stepper8_disableEv>:
	void _disable(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
		_en_io->set(true);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fedc 	bl	800033c <_ZN4GPIO3setEb>
		_stop_step();
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f822 	bl	80005ce <_ZN7Stepper10_stop_stepEv>
	}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_ZN7Stepper11_start_stepEv>:
	void _start_step(void) {
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
		_tim->CR1 |= 1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f042 0201 	orr.w	r2, r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
		// TIMx->BreakDeatTime->MainOutputEneble set
		_tim->BDTR |= 1 << 15;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005b8:	645a      	str	r2, [r3, #68]	; 0x44
		_tim->CNT = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_ZN7Stepper10_stop_stepEv>:
	void _stop_step(void) {
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
		_tim->CR1 &= ~1;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f022 0201 	bic.w	r2, r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
		// TIMx->BreakDeatTime->MainOutputEneble  reset
		_tim->BDTR &= ~(1 << 15);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80005f4:	645a      	str	r2, [r3, #68]	; 0x44
	}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060a:	f000 ff3f 	bl	800148c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060e:	f000 f859 	bl	80006c4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000612:	f000 fc01 	bl	8000e18 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 8000616:	f000 f8c3 	bl	80007a0 <_ZL12MX_I2C1_Initv>
	MX_SPI1_Init();
 800061a:	f000 f90f 	bl	800083c <_ZL12MX_SPI1_Initv>
	MX_TIM1_Init();
 800061e:	f000 f94f 	bl	80008c0 <_ZL12MX_TIM1_Initv>
	MX_TIM3_Init();
 8000622:	f000 fa4b 	bl	8000abc <_ZL12MX_TIM3_Initv>
	MX_TIM16_Init();
 8000626:	f000 fadb 	bl	8000be0 <_ZL13MX_TIM16_Initv>
	MX_TIM17_Init();
 800062a:	f000 fb67 	bl	8000cfc <_ZL13MX_TIM17_Initv>
	/* USER CODE BEGIN 2 */
	led.init();
 800062e:	4821      	ldr	r0, [pc, #132]	; (80006b4 <main+0xb0>)
 8000630:	f7ff fdfe 	bl	8000230 <_ZN4GPIO4initEv>
	btn.init();
 8000634:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0xb4>)
 8000636:	f7ff fdfb 	bl	8000230 <_ZN4GPIO4initEv>

	right.init();
 800063a:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0xb8>)
 800063c:	f7ff fee8 	bl	8000410 <_ZN7Stepper4initEv>

	/*HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);*/
	TIM16->ARR = 200 - 1;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <main+0xbc>)
 8000642:	22c7      	movs	r2, #199	; 0xc7
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
	right.setSpeed(3200);
 8000646:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800064a:	481c      	ldr	r0, [pc, #112]	; (80006bc <main+0xb8>)
 800064c:	f7ff ff3a 	bl	80004c4 <_ZN7Stepper8setSpeedEl>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (btn.get() && !flag) {
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0xb4>)
 8000652:	f7ff fe96 	bl	8000382 <_ZN4GPIO3getEv>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d007      	beq.n	800066c <main+0x68>
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <main+0x68>
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <main+0x6a>
 800066c:	2300      	movs	r3, #0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d008      	beq.n	8000684 <main+0x80>
			right.setPos(3200, RELATIVE);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <main+0xb8>)
 800067a:	f7ff feee 	bl	800045a <_ZN7Stepper6setPosEl15Stepper_PosType>
			flag = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e012      	b.n	80006aa <main+0xa6>
		} else if (!btn.get() && flag) {
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0xb4>)
 8000686:	f7ff fe7c 	bl	8000382 <_ZN4GPIO3getEv>
 800068a:	4603      	mov	r3, r0
 800068c:	f083 0301 	eor.w	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <main+0x9c>
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <main+0x9c>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <main+0x9e>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0xa6>
			flag = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 ff54 	bl	8001558 <HAL_Delay>
		if (btn.get() && !flag) {
 80006b0:	e7ce      	b.n	8000650 <main+0x4c>
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000254 	.word	0x20000254
 80006c0:	40014400 	.word	0x40014400

080006c4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09e      	sub	sp, #120	; 0x78
 80006c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006ce:	2228      	movs	r2, #40	; 0x28
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f9b0 	bl	8004a38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80006e8:	463b      	mov	r3, r7
 80006ea:	223c      	movs	r2, #60	; 0x3c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f9a2 	bl	8004a38 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80006f4:	2303      	movs	r3, #3
 80006f6:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000712:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000714:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000718:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800071a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fb08 	bl	8001d34 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <_Z18SystemClock_Configv+0x74>
		Error_Handler();
 8000734:	f000 fc1e 	bl	8000f74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800074e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000752:	2102      	movs	r1, #2
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fb2b 	bl	8002db0 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_Z18SystemClock_Configv+0xaa>
		Error_Handler();
 800076a:	f000 fc03 	bl	8000f74 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection =
 800076e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000772:	603b      	str	r3, [r7, #0]
	RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000778:	2300      	movs	r3, #0
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800077c:	463b      	mov	r3, r7
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fcfc 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_Z18SystemClock_Configv+0xd4>
		Error_Handler();
 8000794:	f000 fbee 	bl	8000f74 <Error_Handler>
	}
}
 8000798:	bf00      	nop
 800079a:	3778      	adds	r7, #120	; 0x78
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <_ZL12MX_I2C1_Initv+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007ac:	4a22      	ldr	r2, [pc, #136]	; (8000838 <_ZL12MX_I2C1_Initv+0x98>)
 80007ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007dc:	f001 f984 	bl	8001ae8 <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <_ZL12MX_I2C1_Initv+0x54>
		Error_Handler();
 80007f0:	f000 fbc0 	bl	8000f74 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80007f4:	2100      	movs	r1, #0
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 80007f8:	f001 fa05 	bl	8001c06 <HAL_I2CEx_ConfigAnalogFilter>
 80007fc:	4603      	mov	r3, r0
			!= HAL_OK) {
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZL12MX_I2C1_Initv+0x70>
		Error_Handler();
 800080c:	f000 fbb2 	bl	8000f74 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000810:	2100      	movs	r1, #0
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZL12MX_I2C1_Initv+0x90>)
 8000814:	f001 fa42 	bl	8001c9c <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_ZL12MX_I2C1_Initv+0x8c>
		Error_Handler();
 8000828:	f000 fba4 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000006c 	.word	0x2000006c
 8000834:	40005400 	.word	0x40005400
 8000838:	2000090e 	.word	0x2000090e

0800083c <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <_ZL12MX_SPI1_Initv+0x80>)
 8000844:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000856:	f44f 7240 	mov.w	r2, #768	; 0x300
 800085a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800086a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000872:	2208      	movs	r2, #8
 8000874:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <_ZL12MX_SPI1_Initv+0x7c>)
 800089c:	f002 fe1e 	bl	80034dc <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 80008b0:	f000 fb60 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000c0 	.word	0x200000c0
 80008bc:	40013000 	.word	0x40013000

080008c0 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09a      	sub	sp, #104	; 0x68
 80008c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	222c      	movs	r2, #44	; 0x2c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 f89c 	bl	8004a38 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000900:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000902:	4a6d      	ldr	r2, [pc, #436]	; (8000ab8 <_ZL12MX_TIM1_Initv+0x1f8>)
 8000904:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000920:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800092c:	4861      	ldr	r0, [pc, #388]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800092e:	f002 fe80 	bl	8003632 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_ZL12MX_TIM1_Initv+0x86>
		Error_Handler();
 8000942:	f000 fb17 	bl	8000f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800094c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000950:	4619      	mov	r1, r3
 8000952:	4858      	ldr	r0, [pc, #352]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000954:	f003 fa34 	bl	8003dc0 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <_ZL12MX_TIM1_Initv+0xac>
		Error_Handler();
 8000968:	f000 fb04 	bl	8000f74 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800096c:	4851      	ldr	r0, [pc, #324]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800096e:	f002 ff18 	bl	80037a2 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM1_Initv+0xc6>
		Error_Handler();
 8000982:	f000 faf7 	bl	8000f74 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8000986:	484b      	ldr	r0, [pc, #300]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000988:	f002 feaa 	bl	80036e0 <HAL_TIM_OC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf14      	ite	ne
 8000992:	2301      	movne	r3, #1
 8000994:	2300      	moveq	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <_ZL12MX_TIM1_Initv+0xe0>
		Error_Handler();
 800099c:	f000 faea 	bl	8000f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009b0:	4619      	mov	r1, r3
 80009b2:	4840      	ldr	r0, [pc, #256]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 80009b4:	f003 ff00 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <_ZL12MX_TIM1_Initv+0x10c>
		Error_Handler();
 80009c8:	f000 fad4 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	2360      	movs	r3, #96	; 0x60
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d8:	2300      	movs	r3, #0
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 80009f2:	f003 f8d1 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bf14      	ite	ne
 80009fc:	2301      	movne	r3, #1
 80009fe:	2300      	moveq	r3, #0
 8000a00:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <_ZL12MX_TIM1_Initv+0x14a>
		Error_Handler();
 8000a06:	f000 fab5 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000a0a:	2350      	movs	r3, #80	; 0x50
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a12:	2204      	movs	r2, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000a18:	f003 f844 	bl	8003aa4 <HAL_TIM_OC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <_ZL12MX_TIM1_Initv+0x170>
		Error_Handler();
 8000a2c:	f000 faa2 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000a3e:	f003 f831 	bl	8003aa4 <HAL_TIM_OC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2301      	movne	r3, #1
 8000a4a:	2300      	moveq	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <_ZL12MX_TIM1_Initv+0x196>
		Error_Handler();
 8000a52:	f000 fa8f 	bl	8000f74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000a8c:	f003 ff14 	bl	80048b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a90:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf14      	ite	ne
 8000a96:	2301      	movne	r3, #1
 8000a98:	2300      	moveq	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <_ZL12MX_TIM1_Initv+0x1e4>
		Error_Handler();
 8000aa0:	f000 fa68 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000aa6:	f000 fbeb 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000aaa:	bf00      	nop
 8000aac:	3768      	adds	r7, #104	; 0x68
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000124 	.word	0x20000124
 8000ab8:	40012c00 	.word	0x40012c00

08000abc <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000af0:	4a3a      	ldr	r2, [pc, #232]	; (8000bdc <_ZL12MX_TIM3_Initv+0x120>)
 8000af2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48000 - 1;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000af6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000afa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b04:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000b08:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000b16:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b18:	f002 fd8b 	bl	8003632 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <_ZL12MX_TIM3_Initv+0x74>
		Error_Handler();
 8000b2c:	f000 fa22 	bl	8000f74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b3e:	f003 f93f 	bl	8003dc0 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bf14      	ite	ne
 8000b48:	2301      	movne	r3, #1
 8000b4a:	2300      	moveq	r3, #0
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <_ZL12MX_TIM3_Initv+0x9a>
		Error_Handler();
 8000b52:	f000 fa0f 	bl	8000f74 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b58:	f002 fdc2 	bl	80036e0 <HAL_TIM_OC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <_ZL12MX_TIM3_Initv+0xb4>
		Error_Handler();
 8000b6c:	f000 fa02 	bl	8000f74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b80:	f003 fe1a 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <_ZL12MX_TIM3_Initv+0xdc>
		Error_Handler();
 8000b94:	f000 f9ee 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b98:	2330      	movs	r3, #48	; 0x30
 8000b9a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000bb0:	f002 ff78 	bl	8003aa4 <HAL_TIM_OC_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZL12MX_TIM3_Initv+0x10c>
		Error_Handler();
 8000bc4:	f000 f9d6 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000bca:	f000 fb59 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3738      	adds	r7, #56	; 0x38
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000170 	.word	0x20000170
 8000bdc:	40000400 	.word	0x40000400

08000be0 <_ZL13MX_TIM16_Initv>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b092      	sub	sp, #72	; 0x48
 8000be4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 0 */

	/* USER CODE END TIM16_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
 8000bf8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	222c      	movs	r2, #44	; 0x2c
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 ff19 	bl	8004a38 <memset>

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c08:	4a3b      	ldr	r2, [pc, #236]	; (8000cf8 <_ZL13MX_TIM16_Initv+0x118>)
 8000c0a:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 48000 - 1;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c0e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000c12:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10 - 1;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c1c:	2209      	movs	r2, #9
 8000c1e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000c32:	4830      	ldr	r0, [pc, #192]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c34:	f002 fcfd 	bl	8003632 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <_ZL13MX_TIM16_Initv+0x6c>
		Error_Handler();
 8000c48:	f000 f994 	bl	8000f74 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim16) != HAL_OK) {
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c4e:	f002 fd47 	bl	80036e0 <HAL_TIM_OC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	bf14      	ite	ne
 8000c58:	2301      	movne	r3, #1
 8000c5a:	2300      	moveq	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <_ZL13MX_TIM16_Initv+0x86>
		Error_Handler();
 8000c62:	f000 f987 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c66:	2330      	movs	r3, #48	; 0x30
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 8000c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481a      	ldr	r0, [pc, #104]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000c8c:	f002 ff0a 	bl	8003aa4 <HAL_TIM_OC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <_ZL13MX_TIM16_Initv+0xc4>
		Error_Handler();
 8000ca0:	f000 f968 	bl	8000f74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000ccc:	f003 fdf4 	bl	80048b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cd0:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <_ZL13MX_TIM16_Initv+0x104>
		Error_Handler();
 8000ce0:	f000 f948 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */
	HAL_TIM_MspPostInit(&htim16);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <_ZL13MX_TIM16_Initv+0x114>)
 8000ce6:	f000 facb 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3748      	adds	r7, #72	; 0x48
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001bc 	.word	0x200001bc
 8000cf8:	40014400 	.word	0x40014400

08000cfc <_ZL13MX_TIM17_Initv>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b092      	sub	sp, #72	; 0x48
 8000d00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000d16:	463b      	mov	r3, r7
 8000d18:	222c      	movs	r2, #44	; 0x2c
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fe8b 	bl	8004a38 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 8000d22:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d24:	4a3b      	ldr	r2, [pc, #236]	; (8000e14 <_ZL13MX_TIM17_Initv+0x118>)
 8000d26:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48000 - 1;
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d2a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d2e:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d30:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 20 - 1;
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d38:	2213      	movs	r2, #19
 8000d3a:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000d4e:	4830      	ldr	r0, [pc, #192]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d50:	f002 fc6f 	bl	8003632 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <_ZL13MX_TIM17_Initv+0x6c>
		Error_Handler();
 8000d64:	f000 f906 	bl	8000f74 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK) {
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000d6a:	f002 fcb9 	bl	80036e0 <HAL_TIM_OC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf14      	ite	ne
 8000d74:	2301      	movne	r3, #1
 8000d76:	2300      	moveq	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <_ZL13MX_TIM17_Initv+0x86>
		Error_Handler();
 8000d7e:	f000 f8f9 	bl	8000f74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d82:	2330      	movs	r3, #48	; 0x30
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	481a      	ldr	r0, [pc, #104]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000da8:	f002 fe7c 	bl	8003aa4 <HAL_TIM_OC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <_ZL13MX_TIM17_Initv+0xc4>
		Error_Handler();
 8000dbc:	f000 f8da 	bl	8000f74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000de8:	f003 fd66 	bl	80048b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dec:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf14      	ite	ne
 8000df2:	2301      	movne	r3, #1
 8000df4:	2300      	moveq	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <_ZL13MX_TIM17_Initv+0x104>
		Error_Handler();
 8000dfc:	f000 f8ba 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <_ZL13MX_TIM17_Initv+0x114>)
 8000e02:	f000 fa3d 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3748      	adds	r7, #72	; 0x48
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000208 	.word	0x20000208
 8000e14:	40014800 	.word	0x40014800

08000e18 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a45      	ldr	r2, [pc, #276]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a39      	ldr	r2, [pc, #228]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <_ZL12MX_GPIO_Initv+0x130>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ec4:	4821      	ldr	r0, [pc, #132]	; (8000f4c <_ZL12MX_GPIO_Initv+0x134>)
 8000ec6:	f000 fdf7 	bl	8001ab8 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8000eca:	2337      	movs	r3, #55	; 0x37
 8000ecc:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ece:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ed2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <_ZL12MX_GPIO_Initv+0x134>)
 8000ee0:	f000 fc70 	bl	80017c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8000ee4:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000ee8:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <_ZL12MX_GPIO_Initv+0x134>)
 8000efe:	f000 fc61 	bl	80017c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f000 fc54 	bl	80017c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DM_Pin DP_Pin */
	GPIO_InitStruct.Pin = DM_Pin | DP_Pin;
 8000f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000f2e:	230e      	movs	r3, #14
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f000 fc42 	bl	80017c4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f40:	bf00      	nop
 8000f42:	3730      	adds	r7, #48	; 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48001000 	.word	0x48001000

08000f50 <TIM16_Update_IRQ>:

/* USER CODE BEGIN 4 */
void TIM16_Update_IRQ(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	right.irq_handler();
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <TIM16_Update_IRQ+0x1c>)
 8000f56:	f7ff fad1 	bl	80004fc <_ZN7Stepper11irq_handlerEv>
	TIM16->SR &= ~1;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <TIM16_Update_IRQ+0x20>)
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <TIM16_Update_IRQ+0x20>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6113      	str	r3, [r2, #16]
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000254 	.word	0x20000254
 8000f70:	40014400 	.word	0x40014400

08000f74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d132      	bne.n	8000ff6 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12d      	bne.n	8000ff6 <_Z41__static_initialization_and_destruction_0ii+0x76>

#define LEFT_STEPPER_EN GPIOD, 6
#define LEFT_STEPPER_DIR GPIOB, 3

#include <core.h>
Core core(72000000);
 8000f9a:	4919      	ldr	r1, [pc, #100]	; (8001000 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000f9e:	f7ff f913 	bl	80001c8 <_ZN4CoreC1Em>


#include "gpio.hpp"
GPIO led(GPIOE, 8, OUTPUT, NO);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4917      	ldr	r1, [pc, #92]	; (8001008 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000fac:	4817      	ldr	r0, [pc, #92]	; (800100c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000fae:	f7ff f91a 	bl	80001e6 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
GPIO btn(BTN, INPUT, NO);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000fc0:	f7ff f911 	bl	80001e6 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>

GPIO right_dir(RIGHT_STEPPER_DIR, OUTPUT);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2207      	movs	r2, #7
 8000fcc:	4911      	ldr	r1, [pc, #68]	; (8001014 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000fd0:	f7ff f909 	bl	80001e6 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
GPIO right_en(RIGHT_STEPPER_EN, OUTPUT);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2205      	movs	r2, #5
 8000fdc:	490d      	ldr	r1, [pc, #52]	; (8001014 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000fde:	480f      	ldr	r0, [pc, #60]	; (800101c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000fe0:	f7ff f901 	bl	80001e6 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
Stepper right(3200, TIM16, &right_dir, &right_en);
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000fea:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000fec:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000ff2:	f7ff f9db 	bl	80003ac <_ZN7StepperC1EtP11TIM_TypeDefP4GPIOS3_>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	044aa200 	.word	0x044aa200
 8001004:	20000028 	.word	0x20000028
 8001008:	48001000 	.word	0x48001000
 800100c:	2000002c 	.word	0x2000002c
 8001010:	2000003c 	.word	0x2000003c
 8001014:	48000c00 	.word	0x48000c00
 8001018:	2000004c 	.word	0x2000004c
 800101c:	2000005c 	.word	0x2000005c
 8001020:	40014400 	.word	0x40014400
 8001024:	20000254 	.word	0x20000254

08001028 <_GLOBAL__sub_I_core>:
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
 800102c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffa5 	bl	8000f80 <_Z41__static_initialization_and_destruction_0ii>
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x44>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x44>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x44>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x44>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800106e:	2007      	movs	r0, #7
 8001070:	f000 fb66 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_I2C_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d127      	bne.n	80010f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80010ba:	23c0      	movs	r3, #192	; 0xc0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ca:	2304      	movs	r3, #4
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <HAL_I2C_MspInit+0x84>)
 80010d6:	f000 fb75 	bl	80017c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_I2C_MspInit+0x80>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_SPI_MspInit+0x7c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d128      	bne.n	800117c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_SPI_MspInit+0x80>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001130:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800115a:	23e0      	movs	r3, #224	; 0xe0
 800115c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116a:	2305      	movs	r3, #5
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fb24 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40013000 	.word	0x40013000
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a34      	ldr	r2, [pc, #208]	; (800126c <HAL_TIM_Base_MspInit+0xe0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d11c      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a33      	ldr	r2, [pc, #204]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2019      	movs	r0, #25
 80011bc:	f000 facb 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f000 fae4 	bl	800178e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201a      	movs	r0, #26
 80011cc:	f000 fac3 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011d0:	201a      	movs	r0, #26
 80011d2:	f000 fadc 	bl	800178e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011d6:	e044      	b.n	8001262 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <HAL_TIM_Base_MspInit+0xe8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10c      	bne.n	80011fc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
}
 80011fa:	e032      	b.n	8001262 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_TIM_Base_MspInit+0xec>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d114      	bne.n	8001230 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2019      	movs	r0, #25
 8001224:	f000 fa97 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001228:	2019      	movs	r0, #25
 800122a:	f000 fab0 	bl	800178e <HAL_NVIC_EnableIRQ>
}
 800122e:	e018      	b.n	8001262 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_TIM_Base_MspInit+0xf0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6193      	str	r3, [r2, #24]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_Base_MspInit+0xe4>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201a      	movs	r0, #26
 8001258:	f000 fa7d 	bl	8001756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800125c:	201a      	movs	r0, #26
 800125e:	f000 fa96 	bl	800178e <HAL_NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40000400 	.word	0x40000400
 8001278:	40014400 	.word	0x40014400
 800127c:	40014800 	.word	0x40014800

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <HAL_TIM_MspPostInit+0xec>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11c      	bne.n	80012dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ba:	2340      	movs	r3, #64	; 0x40
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ca:	2302      	movs	r3, #2
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4827      	ldr	r0, [pc, #156]	; (8001374 <HAL_TIM_MspPostInit+0xf4>)
 80012d6:	f000 fa75 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012da:	e042      	b.n	8001362 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM16)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_TIM_MspPostInit+0xf8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11c      	bne.n	8001320 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_STEPPER_STEP_Pin;
 80012fe:	2310      	movs	r3, #16
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800130e:	2301      	movs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RIGHT_STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <HAL_TIM_MspPostInit+0xfc>)
 800131a:	f000 fa53 	bl	80017c4 <HAL_GPIO_Init>
}
 800131e:	e020      	b.n	8001362 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM17)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a16      	ldr	r2, [pc, #88]	; (8001380 <HAL_TIM_MspPostInit+0x100>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11b      	bne.n	8001362 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_TIM_MspPostInit+0xf0>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_STEPPER_STEP_Pin;
 8001342:	2320      	movs	r3, #32
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001352:	230a      	movs	r3, #10
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <HAL_TIM_MspPostInit+0xfc>)
 800135e:	f000 fa31 	bl	80017c4 <HAL_GPIO_Init>
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40000400 	.word	0x40000400
 8001370:	40021000 	.word	0x40021000
 8001374:	48000800 	.word	0x48000800
 8001378:	40014400 	.word	0x40014400
 800137c:	48000400 	.word	0x48000400
 8001380:	40014800 	.word	0x40014800

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f8a2 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	TIM16_Update_IRQ();
 80013dc:	f7ff fdb8 	bl	8000f50 <TIM16_Update_IRQ>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80013e2:	f002 fa3f 	bl	8003864 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80013e8:	f002 fa3c 	bl	8003864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000124 	.word	0x20000124
 80013f4:	200001bc 	.word	0x200001bc

080013f8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 80013fe:	f002 fa31 	bl	8003864 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001404:	f002 fa2e 	bl	8003864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000124 	.word	0x20000124
 8001410:	20000208 	.word	0x20000208

08001414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff ffea 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <LoopForever+0x6>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	; (8001478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <LoopForever+0xe>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	; (8001484 <LoopForever+0x16>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f003 fac3 	bl	80049f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146a:	f7ff f8cb 	bl	8000604 <main>

0800146e <LoopForever>:

LoopForever:
    b LoopForever
 800146e:	e7fe      	b.n	800146e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800147c:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 8001480:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001484:	20000280 	.word	0x20000280

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f94f 	bl	8001740 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fdc6 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f967 	bl	80017aa <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f000 f92f 	bl	8001756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008
 800153c:	2000027c 	.word	0x2000027c

08001540 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;  
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000027c 	.word	0x2000027c

08001558 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Delay+0x44>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <__NVIC_EnableIRQ+0x38>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800170c:	d301      	bcc.n	8001712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <SysTick_Config+0x40>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171a:	210f      	movs	r1, #15
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	f7ff ff8e 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SysTick_Config+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SysTick_Config+0x40>)
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010

08001740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff29 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001768:	f7ff ff3e 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 800176c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	6978      	ldr	r0, [r7, #20]
 8001774:	f7ff ff8e 	bl	8001694 <NVIC_EncodePriority>
 8001778:	4602      	mov	r2, r0
 800177a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff5d 	bl	8001640 <__NVIC_SetPriority>
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff31 	bl	8001604 <__NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ffa2 	bl	80016fc <SysTick_Config>
 80017b8:	4603      	mov	r3, r0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e154      	b.n	8001a7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 8146 	beq.w	8001a78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a0 	beq.w	8001a78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a57      	ldr	r2, [pc, #348]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HAL_GPIO_Init+0x2d8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a53      	ldr	r2, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800197a:	d019      	beq.n	80019b0 <HAL_GPIO_Init+0x1ec>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2e0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_Init+0x1e8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x2e4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_Init+0x1e4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x2e8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x1e0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_GPIO_Init+0x2ec>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_Init+0x1dc>
 800199c:	2304      	movs	r3, #4
 800199e:	e008      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a0:	2305      	movs	r3, #5
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1ee>
 80019b0:	2300      	movs	r3, #0
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c2:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x2dc>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f4:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a48:	4a1a      	ldr	r2, [pc, #104]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_GPIO_Init+0x2f0>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f aea3 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	48001000 	.word	0x48001000
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e081      	b.n	8001bfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff fab6 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2224      	movs	r2, #36	; 0x24
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d104      	bne.n	8001b82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69d9      	ldr	r1, [r3, #28]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d138      	bne.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e032      	b.n	8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2224      	movs	r2, #36	; 0x24
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d139      	bne.n	8001d26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e033      	b.n	8001d28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f001 b823 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 817d 	beq.w	800206a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d70:	4bbc      	ldr	r3, [pc, #752]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4bb9      	ldr	r3, [pc, #740]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d15c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x10e>
 8001d88:	4bb6      	ldr	r3, [pc, #728]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d155      	bne.n	8001e42 <HAL_RCC_OscConfig+0x10e>
 8001d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001daa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x94>
 8001dc2:	4ba8      	ldr	r3, [pc, #672]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	e015      	b.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001de4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001df0:	4b9c      	ldr	r3, [pc, #624]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001dfc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e00:	fa92 f2a2 	rbit	r2, r2
 8001e04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 811f 	beq.w	8002068 <HAL_RCC_OscConfig+0x334>
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8116 	bne.w	8002068 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f000 bfaf 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12e>
 8001e54:	4b83      	ldr	r3, [pc, #524]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a82      	ldr	r2, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e036      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x158>
 8001e72:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7b      	ldr	r2, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b79      	ldr	r3, [pc, #484]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a78      	ldr	r2, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e021      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x184>
 8001e9e:	4b71      	ldr	r3, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a70      	ldr	r2, [pc, #448]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6d      	ldr	r2, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a66      	ldr	r2, [pc, #408]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	f023 020f 	bic.w	r2, r3, #15
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	495f      	ldr	r1, [pc, #380]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d059      	beq.n	8001fae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fb21 	bl	8001540 <HAL_GetTick>
 8001efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fb1c 	bl	8001540 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d902      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f000 bf43 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 8001f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_OscConfig+0x218>
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e015      	b.n	8001f78 <HAL_RCC_OscConfig+0x244>
 8001f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f84:	fa92 f2a2 	rbit	r2, r2
 8001f88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ab      	beq.n	8001f04 <HAL_RCC_OscConfig+0x1d0>
 8001fac:	e05d      	b.n	800206a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fac7 	bl	8001540 <HAL_GetTick>
 8001fb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fac2 	bl	8001540 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	d902      	bls.n	8001fce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f000 bee9 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 8001fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fe2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x2cc>
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e015      	b.n	800202c <HAL_RCC_OscConfig+0x2f8>
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800201c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_RCC_OscConfig+0x330>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002030:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002034:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002038:	fa92 f2a2 	rbit	r2, r2
 800203c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002040:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002044:	fab2 f282 	clz	r2, r2
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f002 021f 	and.w	r2, r2, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f202 	lsl.w	r2, r1, r2
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ab      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x284>
 8002060:	e003      	b.n	800206a <HAL_RCC_OscConfig+0x336>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 817d 	beq.w	800237a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002080:	4ba6      	ldr	r3, [pc, #664]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800208c:	4ba3      	ldr	r3, [pc, #652]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d172      	bne.n	800217e <HAL_RCC_OscConfig+0x44a>
 8002098:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d16c      	bne.n	800217e <HAL_RCC_OscConfig+0x44a>
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3a0>
 80020ce:	4b93      	ldr	r3, [pc, #588]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x3c8>
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80020f8:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2202      	movs	r2, #2
 80020fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002102:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002106:	fa92 f2a2 	rbit	r2, r2
 800210a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800210e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCC_OscConfig+0x410>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d002      	beq.n	8002144 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	f000 be2e 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	21f8      	movs	r1, #248	; 0xf8
 800215a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002162:	fa91 f1a1 	rbit	r1, r1
 8002166:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800216a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800216e:	fab1 f181 	clz	r1, r1
 8002172:	b2c9      	uxtb	r1, r1
 8002174:	408b      	lsls	r3, r1
 8002176:	4969      	ldr	r1, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217c:	e0fd      	b.n	800237a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8088 	beq.w	80022a0 <HAL_RCC_OscConfig+0x56c>
 8002190:	2301      	movs	r3, #1
 8002192:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	461a      	mov	r2, r3
 80021b8:	2301      	movs	r3, #1
 80021ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f9c0 	bl	8001540 <HAL_GetTick>
 80021c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f9bb 	bl	8001540 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d902      	bls.n	80021dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	f000 bde2 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x4d8>
 8002206:	4b45      	ldr	r3, [pc, #276]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e013      	b.n	8002234 <HAL_RCC_OscConfig+0x500>
 800220c:	2302      	movs	r3, #2
 800220e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800221e:	2302      	movs	r3, #2
 8002220:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002224:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2202      	movs	r2, #2
 8002236:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800223a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800223e:	fa92 f2a2 	rbit	r2, r2
 8002242:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002246:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800224a:	fab2 f282 	clz	r2, r2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0af      	beq.n	80021c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	21f8      	movs	r1, #248	; 0xf8
 800227c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002284:	fa91 f1a1 	rbit	r1, r1
 8002288:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800228c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002290:	fab1 f181 	clz	r1, r1
 8002294:	b2c9      	uxtb	r1, r1
 8002296:	408b      	lsls	r3, r1
 8002298:	4920      	ldr	r1, [pc, #128]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
 800229e:	e06c      	b.n	800237a <HAL_RCC_OscConfig+0x646>
 80022a0:	2301      	movs	r3, #1
 80022a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f938 	bl	8001540 <HAL_GetTick>
 80022d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff f933 	bl	8001540 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d902      	bls.n	80022ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	f000 bd5a 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 80022ec:	2302      	movs	r3, #2
 80022ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80022fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <HAL_RCC_OscConfig+0x5ec>
 8002316:	4b01      	ldr	r3, [pc, #4]	; (800231c <HAL_RCC_OscConfig+0x5e8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e015      	b.n	8002348 <HAL_RCC_OscConfig+0x614>
 800231c:	40021000 	.word	0x40021000
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002332:	2302      	movs	r3, #2
 8002334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002344:	4bc8      	ldr	r3, [pc, #800]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	2202      	movs	r2, #2
 800234a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800234e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002352:	fa92 f2a2 	rbit	r2, r2
 8002356:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800235a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ad      	bne.n	80022d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8110 	beq.w	80025b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d079      	beq.n	8002494 <HAL_RCC_OscConfig+0x760>
 80023a0:	2301      	movs	r3, #1
 80023a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4bab      	ldr	r3, [pc, #684]	; (800266c <HAL_RCC_OscConfig+0x938>)
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff f8b9 	bl	8001540 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7ff f8b4 	bl	8001540 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d902      	bls.n	80023ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f000 bcdb 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002442:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002444:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 8002446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002450:	2102      	movs	r1, #2
 8002452:	6019      	str	r1, [r3, #0]
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f1a3 	rbit	r1, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800246a:	6019      	str	r1, [r3, #0]
  return result;
 800246c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002470:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0a0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x6a0>
 8002492:	e08d      	b.n	80025b0 <HAL_RCC_OscConfig+0x87c>
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024b6:	601a      	str	r2, [r3, #0]
  return result;
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x938>)
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	461a      	mov	r2, r3
 80024d2:	2300      	movs	r3, #0
 80024d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff f833 	bl	8001540 <HAL_GetTick>
 80024da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff f82e 	bl	8001540 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f000 bc55 	b.w	8002da0 <HAL_RCC_OscConfig+0x106c>
 80024f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002522:	2202      	movs	r2, #2
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002560:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 8002564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800256e:	2102      	movs	r1, #2
 8002570:	6019      	str	r1, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f1a3 	rbit	r1, r3
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002588:	6019      	str	r1, [r3, #0]
  return result;
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d197      	bne.n	80024e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 81a1 	beq.w	8002908 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	61d3      	str	r3, [r2, #28]
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_RCC_OscConfig+0x93c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d11a      	bne.n	8002648 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_RCC_OscConfig+0x93c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_RCC_OscConfig+0x93c>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe ff8f 	bl	8001540 <HAL_GetTick>
 8002622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	e009      	b.n	800263c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe ff8a 	bl	8001540 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e3b1      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x93c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_OscConfig+0x940>
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCC_OscConfig+0x934>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e03c      	b.n	80026e0 <HAL_RCC_OscConfig+0x9ac>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	10908120 	.word	0x10908120
 8002670:	40007000 	.word	0x40007000
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x96a>
 8002684:	4bc1      	ldr	r3, [pc, #772]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4ac0      	ldr	r2, [pc, #768]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	4bbe      	ldr	r3, [pc, #760]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4abd      	ldr	r2, [pc, #756]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e020      	b.n	80026e0 <HAL_RCC_OscConfig+0x9ac>
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x994>
 80026ae:	4bb7      	ldr	r3, [pc, #732]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4ab6      	ldr	r2, [pc, #728]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6213      	str	r3, [r2, #32]
 80026ba:	4bb4      	ldr	r3, [pc, #720]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4ab3      	ldr	r2, [pc, #716]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x9ac>
 80026c8:	4bb0      	ldr	r3, [pc, #704]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4aaf      	ldr	r2, [pc, #700]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4bad      	ldr	r3, [pc, #692]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4aac      	ldr	r2, [pc, #688]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8081 	beq.w	80027f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff25 	bl	8001540 <HAL_GetTick>
 80026f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe ff20 	bl	8001540 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e345      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800271c:	2202      	movs	r2, #2
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002740:	2202      	movs	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800275a:	601a      	str	r2, [r3, #0]
  return result;
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002764:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d102      	bne.n	8002780 <HAL_RCC_OscConfig+0xa4c>
 800277a:	4b84      	ldr	r3, [pc, #528]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	e013      	b.n	80027a8 <HAL_RCC_OscConfig+0xa74>
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	4b79      	ldr	r3, [pc, #484]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027b0:	2102      	movs	r1, #2
 80027b2:	6011      	str	r1, [r2, #0]
 80027b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	fa92 f1a2 	rbit	r1, r2
 80027c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027ca:	6011      	str	r1, [r2, #0]
  return result;
 80027cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	fab2 f282 	clz	r2, r2
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f002 021f 	and.w	r2, r2, #31
 80027e6:	2101      	movs	r1, #1
 80027e8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d084      	beq.n	80026fc <HAL_RCC_OscConfig+0x9c8>
 80027f2:	e07f      	b.n	80028f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe fea4 	bl	8001540 <HAL_GetTick>
 80027f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e00b      	b.n	8002816 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fe9f 	bl	8001540 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e2c4      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800285c:	601a      	str	r2, [r3, #0]
  return result;
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002866:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	b2db      	uxtb	r3, r3
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d102      	bne.n	8002882 <HAL_RCC_OscConfig+0xb4e>
 800287c:	4b43      	ldr	r3, [pc, #268]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	e013      	b.n	80028aa <HAL_RCC_OscConfig+0xb76>
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800288a:	2202      	movs	r2, #2
 800288c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028b2:	2102      	movs	r1, #2
 80028b4:	6011      	str	r1, [r2, #0]
 80028b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	fa92 f1a2 	rbit	r1, r2
 80028c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028cc:	6011      	str	r1, [r2, #0]
  return result;
 80028ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f002 021f 	and.w	r2, r2, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f202 	lsl.w	r2, r1, r2
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d184      	bne.n	80027fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 8002902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002906:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8242 	beq.w	8002d9e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0xc58>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	f000 8213 	beq.w	8002d4e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 8162 	bne.w	8002bfe <HAL_RCC_OscConfig+0xeca>
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002942:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800295e:	601a      	str	r2, [r3, #0]
  return result;
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002968:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	461a      	mov	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe fdde 	bl	8001540 <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002988:	e00c      	b.n	80029a4 <HAL_RCC_OscConfig+0xc70>
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fdd6 	bl	8001540 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1fd      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029c8:	601a      	str	r2, [r3, #0]
  return result;
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0xcba>
 80029e8:	4bb0      	ldr	r3, [pc, #704]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e027      	b.n	8002a3e <HAL_RCC_OscConfig+0xd0a>
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f2a3 	rbit	r2, r3
 8002a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	4b9c      	ldr	r3, [pc, #624]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a4a:	6011      	str	r1, [r2, #0]
 8002a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	fa92 f1a2 	rbit	r1, r2
 8002a5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a62:	6011      	str	r1, [r2, #0]
  return result;
 8002a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	f042 0220 	orr.w	r2, r2, #32
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f002 021f 	and.w	r2, r2, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d182      	bne.n	8002990 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8a:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	497f      	ldr	r1, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ad6:	601a      	str	r2, [r3, #0]
  return result;
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ae0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	461a      	mov	r2, r3
 8002af4:	2301      	movs	r3, #1
 8002af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe fd22 	bl	8001540 <HAL_GetTick>
 8002afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b00:	e009      	b.n	8002b16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b02:	f7fe fd1d 	bl	8001540 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e144      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b3a:	601a      	str	r2, [r3, #0]
  return result;
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_RCC_OscConfig+0xe2c>
 8002b5a:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e027      	b.n	8002bb0 <HAL_RCC_OscConfig+0xe7c>
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bbc:	6011      	str	r1, [r2, #0]
 8002bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	fa92 f1a2 	rbit	r1, r2
 8002bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bd4:	6011      	str	r1, [r2, #0]
  return result;
 8002bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f002 021f 	and.w	r2, r2, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d082      	beq.n	8002b02 <HAL_RCC_OscConfig+0xdce>
 8002bfc:	e0cf      	b.n	8002d9e <HAL_RCC_OscConfig+0x106a>
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fc7c 	bl	8001540 <HAL_GetTick>
 8002c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	e009      	b.n	8002c62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fe fc77 	bl	8001540 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e09e      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c86:	601a      	str	r2, [r3, #0]
  return result;
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d104      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xf7c>
 8002ca6:	4b01      	ldr	r3, [pc, #4]	; (8002cac <HAL_RCC_OscConfig+0xf78>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	e029      	b.n	8002d00 <HAL_RCC_OscConfig+0xfcc>
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fa93 f2a3 	rbit	r2, r3
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCC_OscConfig+0x1078>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d04:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d0c:	6011      	str	r1, [r2, #0]
 8002d0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d12:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	fa92 f1a2 	rbit	r1, r2
 8002d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d24:	6011      	str	r1, [r2, #0]
  return result;
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f002 021f 	and.w	r2, r2, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d180      	bne.n	8002c4e <HAL_RCC_OscConfig+0xf1a>
 8002d4c:	e027      	b.n	8002d9e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01e      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_RCC_OscConfig+0x1078>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b09e      	sub	sp, #120	; 0x78
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e162      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b90      	ldr	r3, [pc, #576]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	498b      	ldr	r1, [pc, #556]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b89      	ldr	r3, [pc, #548]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e14a      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	497f      	ldr	r1, [pc, #508]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80dc 	beq.w	8002fdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d13c      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xf6>
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xa6>
 8002e50:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	e00f      	b.n	8002e76 <HAL_RCC_ClockConfig+0xc6>
 8002e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	667b      	str	r3, [r7, #100]	; 0x64
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	663b      	str	r3, [r7, #96]	; 0x60
 8002e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7e:	fa92 f2a2 	rbit	r2, r2
 8002e82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e86:	fab2 f282 	clz	r2, r2
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	f042 0220 	orr.w	r2, r2, #32
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f002 021f 	and.w	r2, r2, #31
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d17b      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0f3      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d13c      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x178>
 8002eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x128>
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e00f      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x148>
 8002ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002edc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002efc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f002 021f 	and.w	r2, r2, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13a      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0b2      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x1a0>
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e00d      	b.n	8002f6c <HAL_RCC_ClockConfig+0x1bc>
 8002f50:	2302      	movs	r3, #2
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	61ba      	str	r2, [r7, #24]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	fa92 f2a2 	rbit	r2, r2
 8002f76:	617a      	str	r2, [r7, #20]
  return result;
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	fab2 f282 	clz	r2, r2
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f002 021f 	and.w	r2, r2, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e079      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	491a      	ldr	r1, [pc, #104]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fac8 	bl	8001540 <HAL_GetTick>
 8002fb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe fac4 	bl	8001540 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e061      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_RCC_ClockConfig+0x260>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d214      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4906      	ldr	r1, [pc, #24]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <HAL_RCC_ClockConfig+0x25c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e040      	b.n	800308e <HAL_RCC_ClockConfig+0x2de>
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_ClockConfig+0x2e8>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	491a      	ldr	r1, [pc, #104]	; (8003098 <HAL_RCC_ClockConfig+0x2e8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <HAL_RCC_ClockConfig+0x2e8>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4912      	ldr	r1, [pc, #72]	; (8003098 <HAL_RCC_ClockConfig+0x2e8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003052:	f000 f829 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003056:	4601      	mov	r1, r0
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCC_ClockConfig+0x2e8>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003060:	22f0      	movs	r2, #240	; 0xf0
 8003062:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	fa92 f2a2 	rbit	r2, r2
 800306a:	60fa      	str	r2, [r7, #12]
  return result;
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	fab2 f282 	clz	r2, r2
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	40d3      	lsrs	r3, r2
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x2ec>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	fa21 f303 	lsr.w	r3, r1, r3
 800307e:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fa16 	bl	80014b8 <HAL_InitTick>
  
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3778      	adds	r7, #120	; 0x78
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	08004a60 	.word	0x08004a60
 80030a0:	20000000 	.word	0x20000000
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b08b      	sub	sp, #44	; 0x2c
 80030ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d002      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x30>
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x36>
 80030d6:	e03c      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d8:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030da:	623b      	str	r3, [r7, #32]
      break;
 80030dc:	e03c      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	fa92 f2a2 	rbit	r2, r2
 80030f0:	607a      	str	r2, [r7, #4]
  return result;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	40d3      	lsrs	r3, r2
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	220f      	movs	r2, #15
 800310c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	fa92 f2a2 	rbit	r2, r2
 8003114:	60fa      	str	r2, [r7, #12]
  return result;
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	fab2 f282 	clz	r2, r2
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	40d3      	lsrs	r3, r2
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003130:	4a0e      	ldr	r2, [pc, #56]	; (800316c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	e004      	b.n	800314c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	623b      	str	r3, [r7, #32]
      break;
 8003150:	e002      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003154:	623b      	str	r3, [r7, #32]
      break;
 8003156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003158:	6a3b      	ldr	r3, [r7, #32]
}
 800315a:	4618      	mov	r0, r3
 800315c:	372c      	adds	r7, #44	; 0x2c
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	007a1200 	.word	0x007a1200
 8003170:	08004a70 	.word	0x08004a70
 8003174:	08004a80 	.word	0x08004a80
 8003178:	003d0900 	.word	0x003d0900

0800317c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b092      	sub	sp, #72	; 0x48
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80d4 	beq.w	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a0:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10e      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	61d3      	str	r3, [r2, #28]
 80031b8:	4b48      	ldr	r3, [pc, #288]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d6:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e2:	f7fe f9ad 	bl	8001540 <HAL_GetTick>
 80031e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fe f9a9 	bl	8001540 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e169      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8084 	beq.w	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003224:	429a      	cmp	r2, r3
 8003226:	d07c      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003228:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	461a      	mov	r2, r3
 8003252:	2301      	movs	r3, #1
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	461a      	mov	r2, r3
 8003276:	2300      	movs	r3, #0
 8003278:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d04b      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe f959 	bl	8001540 <HAL_GetTick>
 800328e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe f955 	bl	8001540 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e113      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032a8:	2302      	movs	r3, #2
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	2302      	movs	r3, #2
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	61fb      	str	r3, [r7, #28]
  return result;
 80032c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d108      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032d6:	4b01      	ldr	r3, [pc, #4]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	e00d      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40007000 	.word	0x40007000
 80032e4:	10908100 	.word	0x10908100
 80032e8:	2302      	movs	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2202      	movs	r2, #2
 80032fa:	613a      	str	r2, [r7, #16]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	fa92 f2a2 	rbit	r2, r2
 8003302:	60fa      	str	r2, [r7, #12]
  return result;
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0b7      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003322:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	496a      	ldr	r1, [pc, #424]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003346:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003354:	4b60      	ldr	r3, [pc, #384]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f023 0203 	bic.w	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	495d      	ldr	r1, [pc, #372]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003372:	4b59      	ldr	r3, [pc, #356]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4956      	ldr	r1, [pc, #344]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003390:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	494e      	ldr	r1, [pc, #312]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f023 0210 	bic.w	r2, r3, #16
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4947      	ldr	r1, [pc, #284]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033cc:	4b42      	ldr	r3, [pc, #264]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	493f      	ldr	r1, [pc, #252]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f023 0220 	bic.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4938      	ldr	r1, [pc, #224]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003408:	4b33      	ldr	r3, [pc, #204]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4930      	ldr	r1, [pc, #192]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	4929      	ldr	r1, [pc, #164]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4921      	ldr	r1, [pc, #132]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	491a      	ldr	r1, [pc, #104]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4912      	ldr	r1, [pc, #72]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	490b      	ldr	r1, [pc, #44]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3748      	adds	r7, #72	; 0x48
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e09d      	b.n	800362a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fe:	d009      	beq.n	8003514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	e005      	b.n	8003514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fdea 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003554:	d902      	bls.n	800355c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e002      	b.n	8003562 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800355c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003560:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800356a:	d007      	beq.n	800357c <HAL_SPI_Init+0xa0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003574:	d002      	beq.n	800357c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	ea42 0103 	orr.w	r1, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	f003 0204 	and.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e049      	b.n	80036d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fd fd97 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f000 fca1 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e049      	b.n	8003786 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f841 	bl	800378e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fc4a 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e049      	b.n	8003848 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f841 	bl	8003850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f000 fbe9 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0202 	mvn.w	r2, #2
 8003890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fb67 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fb59 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb6a 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0204 	mvn.w	r2, #4
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fb3d 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fb2f 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fb40 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b08      	cmp	r3, #8
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b08      	cmp	r3, #8
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0208 	mvn.w	r2, #8
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2204      	movs	r2, #4
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fb13 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fb05 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb16 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b10      	cmp	r3, #16
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b10      	cmp	r3, #16
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0210 	mvn.w	r2, #16
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2208      	movs	r2, #8
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fae9 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fadb 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 faec 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d10e      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0201 	mvn.w	r2, #1
 80039e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fab5 	bl	8003f52 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d10e      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b80      	cmp	r3, #128	; 0x80
 8003a02:	d107      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 ffda 	bl	80049c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d10e      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d107      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 ffcd 	bl	80049dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d10e      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d107      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa9a 	bl	8003fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d10e      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0220 	mvn.w	r2, #32
 8003a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 ff8d 	bl	80049b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e066      	b.n	8003b90 <HAL_TIM_OC_ConfigChannel+0xec>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b14      	cmp	r3, #20
 8003ace:	d857      	bhi.n	8003b80 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b81 	.word	0x08003b81
 8003ae0:	08003b81 	.word	0x08003b81
 8003ae4:	08003b81 	.word	0x08003b81
 8003ae8:	08003b3b 	.word	0x08003b3b
 8003aec:	08003b81 	.word	0x08003b81
 8003af0:	08003b81 	.word	0x08003b81
 8003af4:	08003b81 	.word	0x08003b81
 8003af8:	08003b49 	.word	0x08003b49
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003b81 	.word	0x08003b81
 8003b04:	08003b81 	.word	0x08003b81
 8003b08:	08003b57 	.word	0x08003b57
 8003b0c:	08003b81 	.word	0x08003b81
 8003b10:	08003b81 	.word	0x08003b81
 8003b14:	08003b81 	.word	0x08003b81
 8003b18:	08003b65 	.word	0x08003b65
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003b81 	.word	0x08003b81
 8003b24:	08003b81 	.word	0x08003b81
 8003b28:	08003b73 	.word	0x08003b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fad0 	bl	80040d8 <TIM_OC1_SetConfig>
      break;
 8003b38:	e025      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fb59 	bl	80041f8 <TIM_OC2_SetConfig>
      break;
 8003b46:	e01e      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbdc 	bl	800430c <TIM_OC3_SetConfig>
      break;
 8003b54:	e017      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fc5d 	bl	800441c <TIM_OC4_SetConfig>
      break;
 8003b62:	e010      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fcc0 	bl	80044f0 <TIM_OC5_SetConfig>
      break;
 8003b70:	e009      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fd1d 	bl	80045b8 <TIM_OC6_SetConfig>
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
      break;
 8003b84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0ff      	b.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b14      	cmp	r3, #20
 8003bc2:	f200 80f0 	bhi.w	8003da6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c21 	.word	0x08003c21
 8003bd0:	08003da7 	.word	0x08003da7
 8003bd4:	08003da7 	.word	0x08003da7
 8003bd8:	08003da7 	.word	0x08003da7
 8003bdc:	08003c61 	.word	0x08003c61
 8003be0:	08003da7 	.word	0x08003da7
 8003be4:	08003da7 	.word	0x08003da7
 8003be8:	08003da7 	.word	0x08003da7
 8003bec:	08003ca3 	.word	0x08003ca3
 8003bf0:	08003da7 	.word	0x08003da7
 8003bf4:	08003da7 	.word	0x08003da7
 8003bf8:	08003da7 	.word	0x08003da7
 8003bfc:	08003ce3 	.word	0x08003ce3
 8003c00:	08003da7 	.word	0x08003da7
 8003c04:	08003da7 	.word	0x08003da7
 8003c08:	08003da7 	.word	0x08003da7
 8003c0c:	08003d25 	.word	0x08003d25
 8003c10:	08003da7 	.word	0x08003da7
 8003c14:	08003da7 	.word	0x08003da7
 8003c18:	08003da7 	.word	0x08003da7
 8003c1c:	08003d65 	.word	0x08003d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa56 	bl	80040d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0208 	orr.w	r2, r2, #8
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	619a      	str	r2, [r3, #24]
      break;
 8003c5e:	e0a5      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fac6 	bl	80041f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6999      	ldr	r1, [r3, #24]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	619a      	str	r2, [r3, #24]
      break;
 8003ca0:	e084      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fb2f 	bl	800430c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0208 	orr.w	r2, r2, #8
 8003cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0204 	bic.w	r2, r2, #4
 8003ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	61da      	str	r2, [r3, #28]
      break;
 8003ce0:	e064      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fb97 	bl	800441c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69d9      	ldr	r1, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	021a      	lsls	r2, r3, #8
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	61da      	str	r2, [r3, #28]
      break;
 8003d22:	e043      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fbe0 	bl	80044f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d62:	e023      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fc24 	bl	80045b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003da4:	e002      	b.n	8003dac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
      break;
 8003daa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop

08003dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_ConfigClockSource+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0b6      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x18a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d03e      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xd8>
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	f200 8087 	bhi.w	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_TIM_ConfigClockSource+0x176>
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d87f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d01a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0xaa>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d87b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e38:	2b60      	cmp	r3, #96	; 0x60
 8003e3a:	d050      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x11e>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d877      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e40:	2b50      	cmp	r3, #80	; 0x50
 8003e42:	d03c      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xfe>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d873      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d058      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x13e>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d86f      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e50:	2b30      	cmp	r3, #48	; 0x30
 8003e52:	d064      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d86b      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d060      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d867      	bhi.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d05a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x15e>
 8003e68:	e062      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f000 fc7d 	bl	8004778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e04f      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6899      	ldr	r1, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f000 fc66 	bl	8004778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e03c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fbda 	bl	8004684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2150      	movs	r1, #80	; 0x50
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fc33 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 8003edc:	e02c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fbf9 	bl	80046e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2160      	movs	r1, #96	; 0x60
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fc23 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e01c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fbba 	bl	8004684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fc13 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 fc0a 	bl	8004742 <TIM_ITRx_SetConfig>
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e000      	b.n	8003f38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <TIM_Base_SetConfig+0x104>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00f      	beq.n	8003ff0 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_Base_SetConfig+0x38>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <TIM_Base_SetConfig+0x108>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_Base_SetConfig+0x38>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <TIM_Base_SetConfig+0x10c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_Base_SetConfig+0x38>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <TIM_Base_SetConfig+0x110>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <TIM_Base_SetConfig+0x104>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01b      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d017      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <TIM_Base_SetConfig+0x108>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <TIM_Base_SetConfig+0x10c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_Base_SetConfig+0x110>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0x8a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <TIM_Base_SetConfig+0x104>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_Base_SetConfig+0xe8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <TIM_Base_SetConfig+0x110>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0xe8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0xe8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0f      	ldr	r2, [pc, #60]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0xe8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40013400 	.word	0x40013400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800

080040d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0303 	bic.w	r3, r3, #3
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 0302 	bic.w	r3, r3, #2
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <TIM_OC1_SetConfig+0x10c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00f      	beq.n	8004158 <TIM_OC1_SetConfig+0x80>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <TIM_OC1_SetConfig+0x110>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00b      	beq.n	8004158 <TIM_OC1_SetConfig+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <TIM_OC1_SetConfig+0x114>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <TIM_OC1_SetConfig+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a29      	ldr	r2, [pc, #164]	; (80041f0 <TIM_OC1_SetConfig+0x118>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <TIM_OC1_SetConfig+0x11c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <TIM_OC1_SetConfig+0x10c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00f      	beq.n	800419a <TIM_OC1_SetConfig+0xc2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <TIM_OC1_SetConfig+0x110>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_OC1_SetConfig+0xc2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <TIM_OC1_SetConfig+0x114>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_OC1_SetConfig+0xc2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <TIM_OC1_SetConfig+0x118>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_OC1_SetConfig+0xc2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <TIM_OC1_SetConfig+0x11c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800

080041f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0320 	bic.w	r3, r3, #32
 8004246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a28      	ldr	r2, [pc, #160]	; (80042f8 <TIM_OC2_SetConfig+0x100>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC2_SetConfig+0x6c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <TIM_OC2_SetConfig+0x104>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10d      	bne.n	8004280 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC2_SetConfig+0x100>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00f      	beq.n	80042a8 <TIM_OC2_SetConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <TIM_OC2_SetConfig+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_OC2_SetConfig+0xb0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <TIM_OC2_SetConfig+0x108>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_OC2_SetConfig+0xb0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <TIM_OC2_SetConfig+0x10c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC2_SetConfig+0xb0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <TIM_OC2_SetConfig+0x110>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d113      	bne.n	80042d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <TIM_OC3_SetConfig+0xfc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_OC3_SetConfig+0x6a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_OC3_SetConfig+0x100>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004390:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <TIM_OC3_SetConfig+0xfc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_OC3_SetConfig+0xae>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <TIM_OC3_SetConfig+0x100>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_OC3_SetConfig+0xae>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1a      	ldr	r2, [pc, #104]	; (8004410 <TIM_OC3_SetConfig+0x104>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_OC3_SetConfig+0xae>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <TIM_OC3_SetConfig+0x108>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC3_SetConfig+0xae>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <TIM_OC3_SetConfig+0x10c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40013400 	.word	0x40013400
 8004410:	40014000 	.word	0x40014000
 8004414:	40014400 	.word	0x40014400
 8004418:	40014800 	.word	0x40014800

0800441c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <TIM_OC4_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00f      	beq.n	80044a0 <TIM_OC4_SetConfig+0x84>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <TIM_OC4_SetConfig+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00b      	beq.n	80044a0 <TIM_OC4_SetConfig+0x84>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <TIM_OC4_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_OC4_SetConfig+0x84>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <TIM_OC4_SetConfig+0xcc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_OC4_SetConfig+0x84>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <TIM_OC4_SetConfig+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d109      	bne.n	80044b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800

080044f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <TIM_OC5_SetConfig+0xb4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_OC5_SetConfig+0x7a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <TIM_OC5_SetConfig+0xb8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_OC5_SetConfig+0x7a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a15      	ldr	r2, [pc, #84]	; (80045ac <TIM_OC5_SetConfig+0xbc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_OC5_SetConfig+0x7a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <TIM_OC5_SetConfig+0xc0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_OC5_SetConfig+0x7a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <TIM_OC5_SetConfig+0xc4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d109      	bne.n	800457e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40013400 	.word	0x40013400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800

080045b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	051b      	lsls	r3, r3, #20
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <TIM_OC6_SetConfig+0xb8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00f      	beq.n	8004634 <TIM_OC6_SetConfig+0x7c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <TIM_OC6_SetConfig+0xbc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_OC6_SetConfig+0x7c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <TIM_OC6_SetConfig+0xc0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_OC6_SetConfig+0x7c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <TIM_OC6_SetConfig+0xc4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC6_SetConfig+0x7c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <TIM_OC6_SetConfig+0xc8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d109      	bne.n	8004648 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40012c00 	.word	0x40012c00
 8004674:	40013400 	.word	0x40013400
 8004678:	40014000 	.word	0x40014000
 800467c:	40014400 	.word	0x40014400
 8004680:	40014800 	.word	0x40014800

08004684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 030a 	bic.w	r3, r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0210 	bic.w	r2, r3, #16
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800470c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	f043 0307 	orr.w	r3, r3, #7
 8004764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	431a      	orrs	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e063      	b.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800480a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d018      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d013      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00e      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	4313      	orrs	r3, r2
 800487c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40014000 	.word	0x40014000

080048b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e065      	b.n	80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d115      	bne.n	800498e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	051b      	lsls	r3, r3, #20
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400

080049b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <__libc_init_array>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	4d0d      	ldr	r5, [pc, #52]	; (8004a28 <__libc_init_array+0x38>)
 80049f4:	4c0d      	ldr	r4, [pc, #52]	; (8004a2c <__libc_init_array+0x3c>)
 80049f6:	1b64      	subs	r4, r4, r5
 80049f8:	10a4      	asrs	r4, r4, #2
 80049fa:	2600      	movs	r6, #0
 80049fc:	42a6      	cmp	r6, r4
 80049fe:	d109      	bne.n	8004a14 <__libc_init_array+0x24>
 8004a00:	4d0b      	ldr	r5, [pc, #44]	; (8004a30 <__libc_init_array+0x40>)
 8004a02:	4c0c      	ldr	r4, [pc, #48]	; (8004a34 <__libc_init_array+0x44>)
 8004a04:	f000 f820 	bl	8004a48 <_init>
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	2600      	movs	r6, #0
 8004a0e:	42a6      	cmp	r6, r4
 8004a10:	d105      	bne.n	8004a1e <__libc_init_array+0x2e>
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a18:	4798      	blx	r3
 8004a1a:	3601      	adds	r6, #1
 8004a1c:	e7ee      	b.n	80049fc <__libc_init_array+0xc>
 8004a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a22:	4798      	blx	r3
 8004a24:	3601      	adds	r6, #1
 8004a26:	e7f2      	b.n	8004a0e <__libc_init_array+0x1e>
 8004a28:	08004a90 	.word	0x08004a90
 8004a2c:	08004a90 	.word	0x08004a90
 8004a30:	08004a90 	.word	0x08004a90
 8004a34:	08004a98 	.word	0x08004a98

08004a38 <memset>:
 8004a38:	4402      	add	r2, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
