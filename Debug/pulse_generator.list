
pulse_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae0  08004ae0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae0  08004ae0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000025c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000faf4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002059  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00031b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e20  00000000  00000000  00032a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001efdc  00000000  00000000  000338b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d90  00000000  00000000  00052894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b28fb  00000000  00000000  00064624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116f1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004048  00000000  00000000  00116f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a98 	.word	0x08004a98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a98 	.word	0x08004a98

080001c8 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>:
	NO = 0b00, UP, DOWN,
} Pull_Mode;

class GPIO {
public:
	GPIO(GPIO_TypeDef *gpio, uint8_t pin, GPIO_Type type = INPUT,
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	460b      	mov	r3, r1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	4613      	mov	r3, r2
 80001dc:	71bb      	strb	r3, [r7, #6]
			GPIO_Pull_Mode pull = NO) {
		_gpio = gpio;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	68ba      	ldr	r2, [r7, #8]
 80001e2:	601a      	str	r2, [r3, #0]
		_pin = pin;
 80001e4:	79fa      	ldrb	r2, [r7, #7]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	605a      	str	r2, [r3, #4]
		_pin_mask = 1 << pin;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2201      	movs	r2, #1
 80001ee:	fa02 f303 	lsl.w	r3, r2, r3
 80001f2:	461a      	mov	r2, r3
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	609a      	str	r2, [r3, #8]
		_pull = pull;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	7e3a      	ldrb	r2, [r7, #24]
 80001fc:	735a      	strb	r2, [r3, #13]
		_type = type;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	731a      	strb	r2, [r3, #12]
	}
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4618      	mov	r0, r3
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <_ZN4GPIO4initEv>:

	void init(void) {
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
		RCC->AHBENR |= RCC_AHBENR_GPIOAEN + GPIO_GET_INDEX(_gpio);
 800021c:	4b37      	ldr	r3, [pc, #220]	; (80002fc <_ZN4GPIO4initEv+0xe8>)
 800021e:	695a      	ldr	r2, [r3, #20]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000228:	d01e      	beq.n	8000268 <_ZN4GPIO4initEv+0x54>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4934      	ldr	r1, [pc, #208]	; (8000300 <_ZN4GPIO4initEv+0xec>)
 8000230:	428b      	cmp	r3, r1
 8000232:	d017      	beq.n	8000264 <_ZN4GPIO4initEv+0x50>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4932      	ldr	r1, [pc, #200]	; (8000304 <_ZN4GPIO4initEv+0xf0>)
 800023a:	428b      	cmp	r3, r1
 800023c:	d00f      	beq.n	800025e <_ZN4GPIO4initEv+0x4a>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4931      	ldr	r1, [pc, #196]	; (8000308 <_ZN4GPIO4initEv+0xf4>)
 8000244:	428b      	cmp	r3, r1
 8000246:	d008      	beq.n	800025a <_ZN4GPIO4initEv+0x46>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	492f      	ldr	r1, [pc, #188]	; (800030c <_ZN4GPIO4initEv+0xf8>)
 800024e:	428b      	cmp	r3, r1
 8000250:	d101      	bne.n	8000256 <_ZN4GPIO4initEv+0x42>
 8000252:	4b2f      	ldr	r3, [pc, #188]	; (8000310 <_ZN4GPIO4initEv+0xfc>)
 8000254:	e00a      	b.n	800026c <_ZN4GPIO4initEv+0x58>
 8000256:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <_ZN4GPIO4initEv+0x100>)
 8000258:	e008      	b.n	800026c <_ZN4GPIO4initEv+0x58>
 800025a:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <_ZN4GPIO4initEv+0x104>)
 800025c:	e006      	b.n	800026c <_ZN4GPIO4initEv+0x58>
 800025e:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8000262:	e003      	b.n	800026c <_ZN4GPIO4initEv+0x58>
 8000264:	4b2d      	ldr	r3, [pc, #180]	; (800031c <_ZN4GPIO4initEv+0x108>)
 8000266:	e001      	b.n	800026c <_ZN4GPIO4initEv+0x58>
 8000268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800026c:	4923      	ldr	r1, [pc, #140]	; (80002fc <_ZN4GPIO4initEv+0xe8>)
 800026e:	4313      	orrs	r3, r2
 8000270:	614b      	str	r3, [r1, #20]

		_gpio->PUPDR &= ~(0b11 << (_pin << 1));
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	68da      	ldr	r2, [r3, #12]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	2103      	movs	r1, #3
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	43db      	mvns	r3, r3
 8000286:	4619      	mov	r1, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	400a      	ands	r2, r1
 800028e:	60da      	str	r2, [r3, #12]
		_gpio->PUPDR |= _pull << (_pin << 1);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	68da      	ldr	r2, [r3, #12]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	7b5b      	ldrb	r3, [r3, #13]
 800029a:	4619      	mov	r1, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	fa01 f303 	lsl.w	r3, r1, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	430a      	orrs	r2, r1
 80002ae:	60da      	str	r2, [r3, #12]

		_gpio->MODER &= ~(0b11 << (_pin << 1));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	2103      	movs	r1, #3
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	43db      	mvns	r3, r3
 80002c4:	4619      	mov	r1, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	400a      	ands	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
		_gpio->MODER |= _type << (_pin << 1);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	7b1b      	ldrb	r3, [r3, #12]
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	430a      	orrs	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]
	}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	48000400 	.word	0x48000400
 8000304:	48000800 	.word	0x48000800
 8000308:	48000c00 	.word	0x48000c00
 800030c:	48001000 	.word	0x48001000
 8000310:	00020004 	.word	0x00020004
 8000314:	00020005 	.word	0x00020005
 8000318:	00020003 	.word	0x00020003
 800031c:	00020001 	.word	0x00020001

08000320 <_ZN4GPIO3setEb>:

	void set(bool val) {
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
		if (val)
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d009      	beq.n	8000346 <_ZN4GPIO3setEb+0x26>
			_gpio->ODR |= _pin_mask;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	6959      	ldr	r1, [r3, #20]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	430a      	orrs	r2, r1
 8000342:	615a      	str	r2, [r3, #20]
		else
			_gpio->ODR &= ~_pin_mask;
	}
 8000344:	e009      	b.n	800035a <_ZN4GPIO3setEb+0x3a>
			_gpio->ODR &= ~_pin_mask;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6959      	ldr	r1, [r3, #20]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	43da      	mvns	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	400a      	ands	r2, r1
 8000358:	615a      	str	r2, [r3, #20]
	}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <_ZN4GPIO3getEv>:
	bool get(void) {
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
		return _gpio->IDR & _pin_mask;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	691a      	ldr	r2, [r3, #16]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4013      	ands	r3, r2
 800037a:	2b00      	cmp	r3, #0
 800037c:	bf14      	ite	ne
 800037e:	2301      	movne	r3, #1
 8000380:	2300      	moveq	r3, #0
 8000382:	b2db      	uxtb	r3, r3
	}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <_ZN7StepperC1EtP11TIM_TypeDefP4GPIOS3_>:

class Stepper {
public:
	uint32_t pos = 0;
	bool dir = 0;
	Stepper(uint16_t steps, TIM_TypeDef *tim, GPIO *dir, GPIO *en) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	607a      	str	r2, [r7, #4]
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	460b      	mov	r3, r1
 800039e:	817b      	strh	r3, [r7, #10]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	2200      	movs	r2, #0
 80003aa:	711a      	strb	r2, [r3, #4]
		_en = en;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	69ba      	ldr	r2, [r7, #24]
 80003b0:	611a      	str	r2, [r3, #16]
		_dir = dir;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	60da      	str	r2, [r3, #12]
		_tim = tim;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	609a      	str	r2, [r3, #8]
	}
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	4618      	mov	r0, r3
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <_ZN7Stepper4initEv>:
	void init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
		_en->init();
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff1b 	bl	8000214 <_ZN4GPIO4initEv>
		_dir->init();
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff16 	bl	8000214 <_ZN4GPIO4initEv>

		_tim->CCER |= 1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	6a1a      	ldr	r2, [r3, #32]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f042 0201 	orr.w	r2, r2, #1
 80003f6:	621a      	str	r2, [r3, #32]
	}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <_ZN7Stepper6enableEv>:

	void enable(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
		_en->set(false);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff86 	bl	8000320 <_ZN4GPIO3setEb>
		_start_step();
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f815 	bl	8000444 <_ZN7Stepper11_start_stepEv>
	}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <_ZN7Stepper7disableEv>:
	void disable(void) {
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
		_en->set(true);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff75 	bl	8000320 <_ZN4GPIO3setEb>
		_stop_step();
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 f822 	bl	8000480 <_ZN7Stepper10_stop_stepEv>

	}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <_ZN7Stepper11_start_stepEv>:
private:
	TIM_TypeDef *_tim;
	GPIO *_dir;
	GPIO *_en;

	void _start_step(void) {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
		_tim->CR1 |= 1;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	f042 0201 	orr.w	r2, r2, #1
 800045a:	601a      	str	r2, [r3, #0]
		// TIMx->BreakDeatTime->MainOutputEneble set
		_tim->BDTR |= 1 << 15;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800046a:	645a      	str	r2, [r3, #68]	; 0x44
		_tim->CNT = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_ZN7Stepper10_stop_stepEv>:
	void _stop_step(void) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
		_tim->CR1 &= ~1;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f022 0201 	bic.w	r2, r2, #1
 8000496:	601a      	str	r2, [r3, #0]
		// TIMx->BreakDeatTime->MainOutputEneble  reset
		_tim->BDTR &= ~(1 << 15);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80004a6:	645a      	str	r2, [r3, #68]	; 0x44
	}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004b8:	f000 ff0e 	bl	80012d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004bc:	f000 f844 	bl	8000548 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c0:	f000 fbec 	bl	8000c9c <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 80004c4:	f000 f8ae 	bl	8000624 <_ZL12MX_I2C1_Initv>
	MX_SPI1_Init();
 80004c8:	f000 f8fa 	bl	80006c0 <_ZL12MX_SPI1_Initv>
	MX_TIM1_Init();
 80004cc:	f000 f93a 	bl	8000744 <_ZL12MX_TIM1_Initv>
	MX_TIM3_Init();
 80004d0:	f000 fa36 	bl	8000940 <_ZL12MX_TIM3_Initv>
	MX_TIM16_Init();
 80004d4:	f000 fac6 	bl	8000a64 <_ZL13MX_TIM16_Initv>
	MX_TIM17_Init();
 80004d8:	f000 fb52 	bl	8000b80 <_ZL13MX_TIM17_Initv>
	/* USER CODE BEGIN 2 */
	led.init();
 80004dc:	4814      	ldr	r0, [pc, #80]	; (8000530 <main+0x7c>)
 80004de:	f7ff fe99 	bl	8000214 <_ZN4GPIO4initEv>
	btn.init();
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <main+0x80>)
 80004e4:	f7ff fe96 	bl	8000214 <_ZN4GPIO4initEv>

	right.init();
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <main+0x84>)
 80004ea:	f7ff ff6f 	bl	80003cc <_ZN7Stepper4initEv>

	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4812      	ldr	r0, [pc, #72]	; (800053c <main+0x88>)
 80004f2:	f003 f859 	bl	80035a8 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);
 80004f6:	2100      	movs	r1, #0
 80004f8:	4811      	ldr	r0, [pc, #68]	; (8000540 <main+0x8c>)
 80004fa:	f003 f855 	bl	80035a8 <HAL_TIM_OC_Start>
	TIM16->PSC = 900 - 1;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <main+0x90>)
 8000500:	f240 3283 	movw	r2, #899	; 0x383
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = 2 - 1;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x90>)
 8000508:	2201      	movs	r2, #1
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c

	right.enable();
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x84>)
 800050e:	f7ff ff77 	bl	8000400 <_ZN7Stepper6enableEv>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (btn.get())
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x80>)
 8000514:	f7ff ff27 	bl	8000366 <_ZN4GPIO3getEv>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d003      	beq.n	8000526 <main+0x72>
			right.enable();
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x84>)
 8000520:	f7ff ff6e 	bl	8000400 <_ZN7Stepper6enableEv>
 8000524:	e7f5      	b.n	8000512 <main+0x5e>
		else
			right.disable();
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x84>)
 8000528:	f7ff ff7b 	bl	8000422 <_ZN7Stepper7disableEv>
		if (btn.get())
 800052c:	e7f1      	b.n	8000512 <main+0x5e>
 800052e:	bf00      	nop
 8000530:	20000210 	.word	0x20000210
 8000534:	20000220 	.word	0x20000220
 8000538:	20000250 	.word	0x20000250
 800053c:	2000012c 	.word	0x2000012c
 8000540:	200001c4 	.word	0x200001c4
 8000544:	40014400 	.word	0x40014400

08000548 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b09e      	sub	sp, #120	; 0x78
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fa96 	bl	8004a88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800055c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800056c:	463b      	mov	r3, r7
 800056e:	223c      	movs	r2, #60	; 0x3c
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fa88 	bl	8004a88 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000578:	2303      	movs	r3, #3
 800057a:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800057c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000580:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000598:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800059c:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800059e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fac8 	bl	8001b38 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	bf14      	ite	ne
 80005ae:	2301      	movne	r3, #1
 80005b0:	2300      	moveq	r3, #0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <_Z18SystemClock_Configv+0x74>
		Error_Handler();
 80005b8:	f000 fc0c 	bl	8000dd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 faeb 	bl	8002bb4 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf14      	ite	ne
 80005e4:	2301      	movne	r3, #1
 80005e6:	2300      	moveq	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <_Z18SystemClock_Configv+0xaa>
		Error_Handler();
 80005ee:	f000 fbf1 	bl	8000dd4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection =
 80005f2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80005f6:	603b      	str	r3, [r7, #0]
	RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000600:	463b      	mov	r3, r7
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fcbc 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <_Z18SystemClock_Configv+0xd4>
		Error_Handler();
 8000618:	f000 fbdc 	bl	8000dd4 <Error_Handler>
	}
}
 800061c:	bf00      	nop
 800061e:	3778      	adds	r7, #120	; 0x78
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 800062a:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <_ZL12MX_I2C1_Initv+0x94>)
 800062c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <_ZL12MX_I2C1_Initv+0x98>)
 8000632:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000660:	f001 f944 	bl	80018ec <HAL_I2C_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf14      	ite	ne
 800066a:	2301      	movne	r3, #1
 800066c:	2300      	moveq	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <_ZL12MX_I2C1_Initv+0x54>
		Error_Handler();
 8000674:	f000 fbae 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000678:	2100      	movs	r1, #0
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 800067c:	f001 f9c5 	bl	8001a0a <HAL_I2CEx_ConfigAnalogFilter>
 8000680:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <_ZL12MX_I2C1_Initv+0x70>
		Error_Handler();
 8000690:	f000 fba0 	bl	8000dd4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000694:	2100      	movs	r1, #0
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <_ZL12MX_I2C1_Initv+0x90>)
 8000698:	f001 fa02 	bl	8001aa0 <HAL_I2CEx_ConfigDigitalFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	bf14      	ite	ne
 80006a2:	2301      	movne	r3, #1
 80006a4:	2300      	moveq	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <_ZL12MX_I2C1_Initv+0x8c>
		Error_Handler();
 80006ac:	f000 fb92 	bl	8000dd4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000028 	.word	0x20000028
 80006b8:	40005400 	.word	0x40005400
 80006bc:	2000090e 	.word	0x2000090e

080006c0 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <_ZL12MX_SPI1_Initv+0x80>)
 80006c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006de:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 800070e:	2207      	movs	r2, #7
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 800071a:	2208      	movs	r2, #8
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <_ZL12MX_SPI1_Initv+0x7c>)
 8000720:	f002 fdde 	bl	80032e0 <HAL_SPI_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <_ZL12MX_SPI1_Initv+0x78>
		Error_Handler();
 8000734:	f000 fb4e 	bl	8000dd4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000007c 	.word	0x2000007c
 8000740:	40013000 	.word	0x40013000

08000744 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b09a      	sub	sp, #104	; 0x68
 8000748:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800074a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	222c      	movs	r2, #44	; 0x2c
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 f982 	bl	8004a88 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000784:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000786:	4a6d      	ldr	r2, [pc, #436]	; (800093c <_ZL12MX_TIM1_Initv+0x1f8>)
 8000788:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b69      	ldr	r3, [pc, #420]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000796:	4b68      	ldr	r3, [pc, #416]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800079c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80007a4:	4b64      	ldr	r3, [pc, #400]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007b0:	4861      	ldr	r0, [pc, #388]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007b2:	f002 fe40 	bl	8003436 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <_ZL12MX_TIM1_Initv+0x86>
		Error_Handler();
 80007c6:	f000 fb05 	bl	8000dd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007d4:	4619      	mov	r1, r3
 80007d6:	4858      	ldr	r0, [pc, #352]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007d8:	f003 faf4 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_ZL12MX_TIM1_Initv+0xac>
		Error_Handler();
 80007ec:	f000 faf2 	bl	8000dd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80007f0:	4851      	ldr	r0, [pc, #324]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80007f2:	f002 ffd9 	bl	80037a8 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <_ZL12MX_TIM1_Initv+0xc6>
		Error_Handler();
 8000806:	f000 fae5 	bl	8000dd4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 800080a:	484b      	ldr	r0, [pc, #300]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 800080c:	f002 fe6a 	bl	80034e4 <HAL_TIM_OC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <_ZL12MX_TIM1_Initv+0xe0>
		Error_Handler();
 8000820:	f000 fad8 	bl	8000dd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000830:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000834:	4619      	mov	r1, r3
 8000836:	4840      	ldr	r0, [pc, #256]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000838:	f003 ffe6 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <_ZL12MX_TIM1_Initv+0x10c>
		Error_Handler();
 800084c:	f000 fac2 	bl	8000dd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800086c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4830      	ldr	r0, [pc, #192]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000876:	f003 f991 	bl	8003b9c <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL12MX_TIM1_Initv+0x14a>
		Error_Handler();
 800088a:	f000 faa3 	bl	8000dd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800088e:	2350      	movs	r3, #80	; 0x50
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4827      	ldr	r0, [pc, #156]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 800089c:	f003 f904 	bl	8003aa8 <HAL_TIM_OC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_ZL12MX_TIM1_Initv+0x170>
		Error_Handler();
 80008b0:	f000 fa90 	bl	8000dd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80008b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008bc:	2208      	movs	r2, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	481d      	ldr	r0, [pc, #116]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 80008c2:	f003 f8f1 	bl	8003aa8 <HAL_TIM_OC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <_ZL12MX_TIM1_Initv+0x196>
		Error_Handler();
 80008d6:	f000 fa7d 	bl	8000dd4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	480a      	ldr	r0, [pc, #40]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 8000910:	f003 fffa 	bl	8004908 <HAL_TIMEx_ConfigBreakDeadTime>
 8000914:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZL12MX_TIM1_Initv+0x1e4>
		Error_Handler();
 8000924:	f000 fa56 	bl	8000dd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <_ZL12MX_TIM1_Initv+0x1f4>)
 800092a:	f000 fbd1 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 800092e:	bf00      	nop
 8000930:	3768      	adds	r7, #104	; 0x68
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000e0 	.word	0x200000e0
 800093c:	40012c00 	.word	0x40012c00

08000940 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000974:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <_ZL12MX_TIM3_Initv+0x120>)
 8000976:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 48000 - 1;
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 800097a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800097e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 500 - 1;
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000988:	f240 12f3 	movw	r2, #499	; 0x1f3
 800098c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800099a:	4830      	ldr	r0, [pc, #192]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 800099c:	f002 fd4b 	bl	8003436 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL12MX_TIM3_Initv+0x74>
		Error_Handler();
 80009b0:	f000 fa10 	bl	8000dd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	4619      	mov	r1, r3
 80009c0:	4826      	ldr	r0, [pc, #152]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 80009c2:	f003 f9ff 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_ZL12MX_TIM3_Initv+0x9a>
		Error_Handler();
 80009d6:	f000 f9fd 	bl	8000dd4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 80009da:	4820      	ldr	r0, [pc, #128]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 80009dc:	f002 fd82 	bl	80034e4 <HAL_TIM_OC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL12MX_TIM3_Initv+0xb4>
		Error_Handler();
 80009f0:	f000 f9f0 	bl	8000dd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4816      	ldr	r0, [pc, #88]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000a04:	f003 ff00 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL12MX_TIM3_Initv+0xdc>
		Error_Handler();
 8000a18:	f000 f9dc 	bl	8000dd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a1c:	2330      	movs	r3, #48	; 0x30
 8000a1e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4619      	mov	r1, r3
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000a34:	f003 f838 	bl	8003aa8 <HAL_TIM_OC_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2301      	movne	r3, #1
 8000a40:	2300      	moveq	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <_ZL12MX_TIM3_Initv+0x10c>
		Error_Handler();
 8000a48:	f000 f9c4 	bl	8000dd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000a4c:	4803      	ldr	r0, [pc, #12]	; (8000a5c <_ZL12MX_TIM3_Initv+0x11c>)
 8000a4e:	f000 fb3f 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000a52:	bf00      	nop
 8000a54:	3738      	adds	r7, #56	; 0x38
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000012c 	.word	0x2000012c
 8000a60:	40000400 	.word	0x40000400

08000a64 <_ZL13MX_TIM16_Initv>:
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	; 0x48
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	222c      	movs	r2, #44	; 0x2c
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 ffff 	bl	8004a88 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000a8c:	4a3b      	ldr	r2, [pc, #236]	; (8000b7c <_ZL13MX_TIM16_Initv+0x118>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000a92:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000a96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000aa0:	2209      	movs	r2, #9
 8000aa2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ab6:	4830      	ldr	r0, [pc, #192]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000ab8:	f002 fcbd 	bl	8003436 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <_ZL13MX_TIM16_Initv+0x6c>
  {
    Error_Handler();
 8000acc:	f000 f982 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ad0:	4829      	ldr	r0, [pc, #164]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000ad2:	f002 fd07 	bl	80034e4 <HAL_TIM_OC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <_ZL13MX_TIM16_Initv+0x86>
  {
    Error_Handler();
 8000ae6:	f000 f975 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000aea:	2330      	movs	r3, #48	; 0x30
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481a      	ldr	r0, [pc, #104]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000b10:	f002 ffca 	bl	8003aa8 <HAL_TIM_OC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <_ZL13MX_TIM16_Initv+0xc4>
  {
    Error_Handler();
 8000b24:	f000 f956 	bl	8000dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000b50:	f003 feda 	bl	8004908 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bf14      	ite	ne
 8000b5a:	2301      	movne	r3, #1
 8000b5c:	2300      	moveq	r3, #0
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <_ZL13MX_TIM16_Initv+0x104>
  {
    Error_Handler();
 8000b64:	f000 f936 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <_ZL13MX_TIM16_Initv+0x114>)
 8000b6a:	f000 fab1 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3748      	adds	r7, #72	; 0x48
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000178 	.word	0x20000178
 8000b7c:	40014400 	.word	0x40014400

08000b80 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b092      	sub	sp, #72	; 0x48
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	222c      	movs	r2, #44	; 0x2c
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ff71 	bl	8004a88 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000ba8:	4a3b      	ldr	r2, [pc, #236]	; (8000c98 <_ZL13MX_TIM17_Initv+0x118>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bae:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000bb2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20-1;
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bbc:	2213      	movs	r2, #19
 8000bbe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bc6:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bd2:	4830      	ldr	r0, [pc, #192]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bd4:	f002 fc2f 	bl	8003436 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8000be8:	f000 f8f4 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000bec:	4829      	ldr	r0, [pc, #164]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000bee:	f002 fc79 	bl	80034e4 <HAL_TIM_OC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8000c02:	f000 f8e7 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481a      	ldr	r0, [pc, #104]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000c2c:	f002 ff3c 	bl	8003aa8 <HAL_TIM_OC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <_ZL13MX_TIM17_Initv+0xc4>
  {
    Error_Handler();
 8000c40:	f000 f8c8 	bl	8000dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000c6c:	f003 fe4c 	bl	8004908 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <_ZL13MX_TIM17_Initv+0x104>
  {
    Error_Handler();
 8000c80:	f000 f8a8 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <_ZL13MX_TIM17_Initv+0x114>)
 8000c86:	f000 fa23 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000c8a:	bf00      	nop
 8000c8c:	3748      	adds	r7, #72	; 0x48
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001c4 	.word	0x200001c4
 8000c98:	40014800 	.word	0x40014800

08000c9c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb2:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a45      	ldr	r2, [pc, #276]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a3f      	ldr	r2, [pc, #252]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	4a39      	ldr	r2, [pc, #228]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cec:	6153      	str	r3, [r2, #20]
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <_ZL12MX_GPIO_Initv+0x130>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000d42:	2200      	movs	r2, #0
 8000d44:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x134>)
 8000d4a:	f000 fdb7 	bl	80018bc <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	 MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin
 8000d4e:	2337      	movs	r3, #55	; 0x37
 8000d50:	61fb      	str	r3, [r7, #28]
			| MEMS_INT1_Pin | MEMS_INT2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x134>)
 8000d64:	f000 fc30 	bl	80015c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8000d68:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d6c:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <_ZL12MX_GPIO_Initv+0x134>)
 8000d82:	f000 fc21 	bl	80015c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 fc14 	bl	80015c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : DM_Pin DP_Pin */
	GPIO_InitStruct.Pin = DM_Pin | DP_Pin;
 8000da0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000db2:	230e      	movs	r3, #14
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f000 fc02 	bl	80015c8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48001000 	.word	0x48001000

08000dd4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d12e      	bne.n	8000e4e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d129      	bne.n	8000e4e <_Z41__static_initialization_and_destruction_0ii+0x6e>
GPIO led(GPIOE, 8, OUTPUT, NO);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2208      	movs	r2, #8
 8000e02:	4915      	ldr	r1, [pc, #84]	; (8000e58 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000e06:	f7ff f9df 	bl	80001c8 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
GPIO btn(GPIOA, 0, INPUT, NO);
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2200      	movs	r2, #0
 8000e12:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e16:	4812      	ldr	r0, [pc, #72]	; (8000e60 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000e18:	f7ff f9d6 	bl	80001c8 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
GPIO right_dir(RIGHT_STEPPER_DIR, OUTPUT);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	2207      	movs	r2, #7
 8000e24:	490f      	ldr	r1, [pc, #60]	; (8000e64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000e28:	f7ff f9ce 	bl	80001c8 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
GPIO right_en(RIGHT_STEPPER_EN, OUTPUT);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	2205      	movs	r2, #5
 8000e34:	490b      	ldr	r1, [pc, #44]	; (8000e64 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000e38:	f7ff f9c6 	bl	80001c8 <_ZN4GPIOC1EP12GPIO_TypeDefh9GPIO_Type14GPIO_Pull_Mode>
Stepper right(3200, TIM16, &right_dir, &right_en);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000e44:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000e4a:	f7ff faa1 	bl	8000390 <_ZN7StepperC1EtP11TIM_TypeDefP4GPIOS3_>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	48001000 	.word	0x48001000
 8000e5c:	20000210 	.word	0x20000210
 8000e60:	20000220 	.word	0x20000220
 8000e64:	48000c00 	.word	0x48000c00
 8000e68:	20000230 	.word	0x20000230
 8000e6c:	20000240 	.word	0x20000240
 8000e70:	40014400 	.word	0x40014400
 8000e74:	20000250 	.word	0x20000250

08000e78 <_GLOBAL__sub_I_hi2c1>:
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff ffad 	bl	8000de0 <_Z41__static_initialization_and_destruction_0ii>
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x44>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f000 fb40 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_I2C_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d127      	bne.n	8000f42 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f0a:	23c0      	movs	r3, #192	; 0xc0
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_I2C_MspInit+0x84>)
 8000f26:	f000 fb4f 	bl	80015c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_I2C_MspInit+0x80>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40005400 	.word	0x40005400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48000400 	.word	0x48000400

08000f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x7c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d128      	bne.n	8000fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_SPI_MspInit+0x80>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000faa:	23e0      	movs	r3, #224	; 0xe0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f000 fafe 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a34      	ldr	r2, [pc, #208]	; (80010bc <HAL_TIM_Base_MspInit+0xe0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11c      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2019      	movs	r0, #25
 800100c:	f000 faa5 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001010:	2019      	movs	r0, #25
 8001012:	f000 fabe 	bl	8001592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	201a      	movs	r0, #26
 800101c:	f000 fa9d 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001020:	201a      	movs	r0, #26
 8001022:	f000 fab6 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001026:	e044      	b.n	80010b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_TIM_Base_MspInit+0xe8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10c      	bne.n	800104c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
}
 800104a:	e032      	b.n	80010b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_TIM_Base_MspInit+0xec>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d114      	bne.n	8001080 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2019      	movs	r0, #25
 8001074:	f000 fa71 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001078:	2019      	movs	r0, #25
 800107a:	f000 fa8a 	bl	8001592 <HAL_NVIC_EnableIRQ>
}
 800107e:	e018      	b.n	80010b2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_TIM_Base_MspInit+0xf0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_TIM_Base_MspInit+0xe4>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201a      	movs	r0, #26
 80010a8:	f000 fa57 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010ac:	201a      	movs	r0, #26
 80010ae:	f000 fa70 	bl	8001592 <HAL_NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40000400 	.word	0x40000400
 80010c8:	40014400 	.word	0x40014400
 80010cc:	40014800 	.word	0x40014800

080010d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_TIM_MspPostInit+0xec>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d11c      	bne.n	800112c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 80010f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800111a:	2302      	movs	r3, #2
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4827      	ldr	r0, [pc, #156]	; (80011c4 <HAL_TIM_MspPostInit+0xf4>)
 8001126:	f000 fa4f 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800112a:	e042      	b.n	80011b2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM16)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_TIM_MspPostInit+0xf8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d11c      	bne.n	8001170 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 800113c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_STEPPER_STEP_Pin;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800115e:	2301      	movs	r3, #1
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RIGHT_STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <HAL_TIM_MspPostInit+0xfc>)
 800116a:	f000 fa2d 	bl	80015c8 <HAL_GPIO_Init>
}
 800116e:	e020      	b.n	80011b2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM17)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_TIM_MspPostInit+0x100>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11b      	bne.n	80011b2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_TIM_MspPostInit+0xf0>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_STEPPER_STEP_Pin;
 8001192:	2320      	movs	r3, #32
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011a2:	230a      	movs	r3, #10
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_STEPPER_STEP_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <HAL_TIM_MspPostInit+0xfc>)
 80011ae:	f000 fa0b 	bl	80015c8 <HAL_GPIO_Init>
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000800 	.word	0x48000800
 80011c8:	40014400 	.word	0x40014400
 80011cc:	48000400 	.word	0x48000400
 80011d0:	40014800 	.word	0x40014800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8a0 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800122e:	f002 fb1c 	bl	800386a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001234:	f002 fb19 	bl	800386a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000e0 	.word	0x200000e0
 8001240:	20000178 	.word	0x20000178

08001244 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800124a:	f002 fb0e 	bl	800386a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001250:	f002 fb0b 	bl	800386a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000e0 	.word	0x200000e0
 800125c:	200001c4 	.word	0x200001c4

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fbc5 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff f8fd 	bl	80004b4 <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c8:	08004aec 	.word	0x08004aec
  ldr r2, =_sbss
 80012cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d0:	20000268 	.word	0x20000268

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f92b 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fdc8 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f943 	bl	80015ae <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001340:	f000 f90b 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000264 	.word	0x20000264

0800138c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000264 	.word	0x20000264

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e154      	b.n	8001882 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8146 	beq.w	800187c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d005      	beq.n	8001608 <HAL_GPIO_Init+0x40>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0201 	and.w	r2, r3, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b03      	cmp	r3, #3
 8001674:	d017      	beq.n	80016a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d123      	bne.n	80016fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0203 	and.w	r2, r3, #3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80a0 	beq.w	800187c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <HAL_GPIO_Init+0x2d8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x2d8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_GPIO_Init+0x2d8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001754:	4a53      	ldr	r2, [pc, #332]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800177e:	d019      	beq.n	80017b4 <HAL_GPIO_Init+0x1ec>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2e0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1e8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2e4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1e4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a47      	ldr	r2, [pc, #284]	; (80018b0 <HAL_GPIO_Init+0x2e8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1e0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <HAL_GPIO_Init+0x2ec>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1dc>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e008      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017a4:	2305      	movs	r3, #5
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b4:	2300      	movs	r3, #0
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c6:	4937      	ldr	r1, [pc, #220]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d4:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800184c:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f aea3 	bne.w	80015d8 <HAL_GPIO_Init+0x10>
  }
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	48000400 	.word	0x48000400
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	48001000 	.word	0x48001000
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e081      	b.n	8001a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fadc 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e006      	b.n	8001974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d138      	bne.n	8001a92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e032      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	; 0x24
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d139      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e033      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f001 b823 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 817d 	beq.w	8001e6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b74:	4bbc      	ldr	r3, [pc, #752]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d00c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b80:	4bb9      	ldr	r3, [pc, #740]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d15c      	bne.n	8001c46 <HAL_RCC_OscConfig+0x10e>
 8001b8c:	4bb6      	ldr	r3, [pc, #728]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d155      	bne.n	8001c46 <HAL_RCC_OscConfig+0x10e>
 8001b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x94>
 8001bc6:	4ba8      	ldr	r3, [pc, #672]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e015      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc0>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001be8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bf4:	4b9c      	ldr	r3, [pc, #624]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c04:	fa92 f2a2 	rbit	r2, r2
 8001c08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 811f 	beq.w	8001e6c <HAL_RCC_OscConfig+0x334>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8116 	bne.w	8001e6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bfaf 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12e>
 8001c58:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a82      	ldr	r2, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e036      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x158>
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e021      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x184>
 8001ca2:	4b71      	ldr	r3, [pc, #452]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a70      	ldr	r2, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6d      	ldr	r2, [pc, #436]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd4:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 020f 	bic.w	r2, r3, #15
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	495f      	ldr	r1, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d059      	beq.n	8001db2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb45 	bl	800138c <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb40 	bl	800138c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d902      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f000 bf43 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x218>
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e015      	b.n	8001d7c <HAL_RCC_OscConfig+0x244>
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d94:	fab2 f282 	clz	r2, r2
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f002 021f 	and.w	r2, r2, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ab      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1d0>
 8001db0:	e05d      	b.n	8001e6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff faeb 	bl	800138c <HAL_GetTick>
 8001db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fae6 	bl	800138c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d902      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f000 bee9 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2cc>
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e015      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f8>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f002 021f 	and.w	r2, r2, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ab      	bne.n	8001dbc <HAL_RCC_OscConfig+0x284>
 8001e64:	e003      	b.n	8001e6e <HAL_RCC_OscConfig+0x336>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 817d 	beq.w	800217e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e84:	4ba6      	ldr	r3, [pc, #664]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e90:	4ba3      	ldr	r3, [pc, #652]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d172      	bne.n	8001f82 <HAL_RCC_OscConfig+0x44a>
 8001e9c:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d16c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x44a>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3a0>
 8001ed2:	4b93      	ldr	r3, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c8>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001efc:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x410>
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f000 be2e 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	21f8      	movs	r1, #248	; 0xf8
 8001f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f66:	fa91 f1a1 	rbit	r1, r1
 8001f6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f72:	fab1 f181 	clz	r1, r1
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	4969      	ldr	r1, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f80:	e0fd      	b.n	800217e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8088 	beq.w	80020a4 <HAL_RCC_OscConfig+0x56c>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9e4 	bl	800138c <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f9df 	bl	800138c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d902      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f000 bde2 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ff2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x4d8>
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e013      	b.n	8002038 <HAL_RCC_OscConfig+0x500>
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002028:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800203e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800204a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0af      	beq.n	8001fca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	21f8      	movs	r1, #248	; 0xf8
 8002080:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002088:	fa91 f1a1 	rbit	r1, r1
 800208c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002090:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002094:	fab1 f181 	clz	r1, r1
 8002098:	b2c9      	uxtb	r1, r1
 800209a:	408b      	lsls	r3, r1
 800209c:	4920      	ldr	r1, [pc, #128]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e06c      	b.n	800217e <HAL_RCC_OscConfig+0x646>
 80020a4:	2301      	movs	r3, #1
 80020a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	461a      	mov	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f95c 	bl	800138c <HAL_GetTick>
 80020d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff f957 	bl	800138c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	f000 bd5a 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <HAL_RCC_OscConfig+0x5ec>
 800211a:	4b01      	ldr	r3, [pc, #4]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e015      	b.n	800214c <HAL_RCC_OscConfig+0x614>
 8002120:	40021000 	.word	0x40021000
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800213c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002148:	4bc8      	ldr	r3, [pc, #800]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002152:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800215e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ad      	bne.n	80020da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8110 	beq.w	80023b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d079      	beq.n	8002298 <HAL_RCC_OscConfig+0x760>
 80021a4:	2301      	movs	r3, #1
 80021a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4bab      	ldr	r3, [pc, #684]	; (8002470 <HAL_RCC_OscConfig+0x938>)
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff f8dd 	bl	800138c <HAL_GetTick>
 80021d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff f8d8 	bl	800138c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f000 bcdb 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002248:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800224a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002254:	2102      	movs	r1, #2
 8002256:	6019      	str	r1, [r3, #0]
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f1a3 	rbit	r1, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800226e:	6019      	str	r1, [r3, #0]
  return result;
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0a0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x6a0>
 8002296:	e08d      	b.n	80023b4 <HAL_RCC_OscConfig+0x87c>
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022ba:	601a      	str	r2, [r3, #0]
  return result;
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x938>)
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff f857 	bl	800138c <HAL_GetTick>
 80022de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f852 	bl	800138c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d902      	bls.n	80022fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	f000 bc55 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800234a:	2202      	movs	r2, #2
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x934>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002372:	2102      	movs	r1, #2
 8002374:	6019      	str	r1, [r3, #0]
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f1a3 	rbit	r1, r3
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800238c:	6019      	str	r1, [r3, #0]
  return result;
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d197      	bne.n	80022e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 81a1 	beq.w	800270c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002402:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7fe ffb3 	bl	800138c <HAL_GetTick>
 8002426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	e009      	b.n	8002440 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe ffae 	bl	800138c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e3b1      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_OscConfig+0x940>
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a02      	ldr	r2, [pc, #8]	; (800246c <HAL_RCC_OscConfig+0x934>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e03c      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	10908120 	.word	0x10908120
 8002474:	40007000 	.word	0x40007000
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x96a>
 8002488:	4bc1      	ldr	r3, [pc, #772]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4ac0      	ldr	r2, [pc, #768]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	4bbe      	ldr	r3, [pc, #760]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4abd      	ldr	r2, [pc, #756]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e020      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x994>
 80024b2:	4bb7      	ldr	r3, [pc, #732]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4ab6      	ldr	r2, [pc, #728]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4bb4      	ldr	r3, [pc, #720]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4ab3      	ldr	r2, [pc, #716]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 80024cc:	4bb0      	ldr	r3, [pc, #704]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4aaf      	ldr	r2, [pc, #700]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4bad      	ldr	r3, [pc, #692]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4aac      	ldr	r2, [pc, #688]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8081 	beq.w	80025f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe ff49 	bl	800138c <HAL_GetTick>
 80024fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe ff44 	bl	800138c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e345      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800255e:	601a      	str	r2, [r3, #0]
  return result;
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0xa4c>
 800257e:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0xa74>
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025b4:	2102      	movs	r1, #2
 80025b6:	6011      	str	r1, [r2, #0]
 80025b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fa92 f1a2 	rbit	r1, r2
 80025c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025ce:	6011      	str	r1, [r2, #0]
  return result;
 80025d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d084      	beq.n	8002500 <HAL_RCC_OscConfig+0x9c8>
 80025f6:	e07f      	b.n	80026f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fec8 	bl	800138c <HAL_GetTick>
 80025fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fec3 	bl	800138c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e2c4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002622:	2202      	movs	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f2a3 	rbit	r2, r3
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002646:	2202      	movs	r2, #2
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002660:	601a      	str	r2, [r3, #0]
  return result;
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800266a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0xb4e>
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	e013      	b.n	80026ae <HAL_RCC_OscConfig+0xb76>
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026b6:	2102      	movs	r1, #2
 80026b8:	6011      	str	r1, [r2, #0]
 80026ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fa92 f1a2 	rbit	r1, r2
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026d0:	6011      	str	r1, [r2, #0]
  return result;
 80026d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f002 021f 	and.w	r2, r2, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d184      	bne.n	8002602 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8242 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	f000 8213 	beq.w	8002b52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	f040 8162 	bne.w	8002a02 <HAL_RCC_OscConfig+0xeca>
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800276c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fe02 	bl	800138c <HAL_GetTick>
 8002788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e00c      	b.n	80027a8 <HAL_RCC_OscConfig+0xc70>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fdfa 	bl	800138c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1fd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xcba>
 80027ec:	4bb0      	ldr	r3, [pc, #704]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0xd0a>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b9c      	ldr	r3, [pc, #624]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002846:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800284a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002854:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fa92 f1a2 	rbit	r1, r2
 800285e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002862:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002866:	6011      	str	r1, [r2, #0]
  return result;
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d182      	bne.n	8002794 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288e:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	497f      	ldr	r1, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fd46 	bl	800138c <HAL_GetTick>
 8002900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e009      	b.n	800291a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fd41 	bl	800138c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e144      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800293e:	601a      	str	r2, [r3, #0]
  return result;
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0xe2c>
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e027      	b.n	80029b4 <HAL_RCC_OscConfig+0xe7c>
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fa92 f1a2 	rbit	r1, r2
 80029d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029d8:	6011      	str	r1, [r2, #0]
  return result;
 80029da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d082      	beq.n	8002906 <HAL_RCC_OscConfig+0xdce>
 8002a00:	e0cf      	b.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	461a      	mov	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fca0 	bl	800138c <HAL_GetTick>
 8002a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fc9b 	bl	800138c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e09e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d104      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xf7c>
 8002aaa:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e029      	b.n	8002b04 <HAL_RCC_OscConfig+0xfcc>
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_OscConfig+0x1078>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b28:	6011      	str	r1, [r2, #0]
  return result;
 8002b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d180      	bne.n	8002a52 <HAL_RCC_OscConfig+0xf1a>
 8002b50:	e027      	b.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_OscConfig+0x1078>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09e      	sub	sp, #120	; 0x78
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e162      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	498b      	ldr	r1, [pc, #556]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e14a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	497f      	ldr	r1, [pc, #508]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80dc 	beq.w	8002de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d13c      	bne.n	8002caa <HAL_RCC_ClockConfig+0xf6>
 8002c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xa6>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e00f      	b.n	8002c7a <HAL_RCC_ClockConfig+0xc6>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d17b      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0f3      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d13c      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x178>
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x128>
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_ClockConfig+0x148>
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d00:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13a      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b2      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x1a0>
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e00d      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1bc>
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	2302      	movs	r3, #2
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2202      	movs	r2, #2
 8002d72:	61ba      	str	r2, [r7, #24]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	617a      	str	r2, [r7, #20]
  return result;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e079      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	491a      	ldr	r1, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe faec 	bl	800138c <HAL_GetTick>
 8002db4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fae8 	bl	800138c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e061      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d214      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e040      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4912      	ldr	r1, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e56:	f000 f829 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	22f0      	movs	r2, #240	; 0xf0
 8002e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	40d3      	lsrs	r3, r2
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fa3a 	bl	8001304 <HAL_InitTick>
  
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3778      	adds	r7, #120	; 0x78
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08004ab0 	.word	0x08004ab0
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eda:	e03c      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ede:	623b      	str	r3, [r7, #32]
      break;
 8002ee0:	e03c      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ee8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002eec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	fa92 f2a2 	rbit	r2, r2
 8002ef4:	607a      	str	r2, [r7, #4]
  return result;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	40d3      	lsrs	r3, r2
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	220f      	movs	r2, #15
 8002f10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	60fa      	str	r2, [r7, #12]
  return result;
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	40d3      	lsrs	r3, r2
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e004      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f58:	623b      	str	r3, [r7, #32]
      break;
 8002f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	08004ac0 	.word	0x08004ac0
 8002f78:	08004ad0 	.word	0x08004ad0
 8002f7c:	003d0900 	.word	0x003d0900

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b092      	sub	sp, #72	; 0x48
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80d4 	beq.w	800314c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a4a      	ldr	r2, [pc, #296]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a41      	ldr	r2, [pc, #260]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f9d1 	bl	800138c <HAL_GetTick>
 8002fea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fe f9cd 	bl	800138c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b64      	cmp	r3, #100	; 0x64
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e169      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8084 	beq.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003028:	429a      	cmp	r2, r3
 800302a:	d07c      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2301      	movs	r3, #1
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	461a      	mov	r2, r3
 800307a:	2300      	movs	r3, #0
 800307c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003082:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04b      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe f97d 	bl	800138c <HAL_GetTick>
 8003092:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f979 	bl	800138c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e113      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80030ac:	2302      	movs	r3, #2
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	2302      	movs	r3, #2
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	61fb      	str	r3, [r7, #28]
  return result;
 80030c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d108      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80030da:	4b01      	ldr	r3, [pc, #4]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	e00d      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
 80030e8:	10908100 	.word	0x10908100
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	4b78      	ldr	r3, [pc, #480]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2202      	movs	r2, #2
 80030fe:	613a      	str	r2, [r7, #16]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	fa92 f2a2 	rbit	r2, r2
 8003106:	60fa      	str	r2, [r7, #12]
  return result;
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	fab2 f282 	clz	r2, r2
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	f002 021f 	and.w	r2, r2, #31
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f202 	lsl.w	r2, r1, r2
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0b7      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	496a      	ldr	r1, [pc, #424]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003138:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003158:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f023 0203 	bic.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	495d      	ldr	r1, [pc, #372]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003176:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4956      	ldr	r1, [pc, #344]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003194:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	494e      	ldr	r1, [pc, #312]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4947      	ldr	r1, [pc, #284]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031d0:	4b42      	ldr	r3, [pc, #264]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	493f      	ldr	r1, [pc, #252]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f023 0220 	bic.w	r2, r3, #32
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4938      	ldr	r1, [pc, #224]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320c:	4b33      	ldr	r3, [pc, #204]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	4930      	ldr	r1, [pc, #192]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	4929      	ldr	r1, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4921      	ldr	r1, [pc, #132]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	4912      	ldr	r1, [pc, #72]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	490b      	ldr	r1, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3748      	adds	r7, #72	; 0x48
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09d      	b.n	800342e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003302:	d009      	beq.n	8003318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
 800330a:	e005      	b.n	8003318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fe10 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003358:	d902      	bls.n	8003360 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e002      	b.n	8003366 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003364:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800336e:	d007      	beq.n	8003380 <HAL_SPI_Init+0xa0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003378:	d002      	beq.n	8003380 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	ea42 0103 	orr.w	r1, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	f003 0204 	and.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033fc:	ea42 0103 	orr.w	r1, r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e049      	b.n	80034dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d106      	bne.n	8003462 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fd fdbd 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f000 fda1 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e049      	b.n	800358a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f841 	bl	8003592 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fd4a 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_TIM_OC_Start+0x24>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e03c      	b.n	8003646 <HAL_TIM_OC_Start+0x9e>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d109      	bne.n	80035e6 <HAL_TIM_OC_Start+0x3e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e02f      	b.n	8003646 <HAL_TIM_OC_Start+0x9e>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d109      	bne.n	8003600 <HAL_TIM_OC_Start+0x58>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e022      	b.n	8003646 <HAL_TIM_OC_Start+0x9e>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d109      	bne.n	800361a <HAL_TIM_OC_Start+0x72>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e015      	b.n	8003646 <HAL_TIM_OC_Start+0x9e>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d109      	bne.n	8003634 <HAL_TIM_OC_Start+0x8c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e008      	b.n	8003646 <HAL_TIM_OC_Start+0x9e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e097      	b.n	800377e <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_OC_Start+0xb6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800365c:	e023      	b.n	80036a6 <HAL_TIM_OC_Start+0xfe>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_OC_Start+0xc6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800366c:	e01b      	b.n	80036a6 <HAL_TIM_OC_Start+0xfe>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_OC_Start+0xd6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367c:	e013      	b.n	80036a6 <HAL_TIM_OC_Start+0xfe>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b0c      	cmp	r3, #12
 8003682:	d104      	bne.n	800368e <HAL_TIM_OC_Start+0xe6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800368c:	e00b      	b.n	80036a6 <HAL_TIM_OC_Start+0xfe>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b10      	cmp	r3, #16
 8003692:	d104      	bne.n	800369e <HAL_TIM_OC_Start+0xf6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800369c:	e003      	b.n	80036a6 <HAL_TIM_OC_Start+0xfe>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f884 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a33      	ldr	r2, [pc, #204]	; (8003788 <HAL_TIM_OC_Start+0x1e0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_TIM_OC_Start+0x13e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a32      	ldr	r2, [pc, #200]	; (800378c <HAL_TIM_OC_Start+0x1e4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_TIM_OC_Start+0x13e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a30      	ldr	r2, [pc, #192]	; (8003790 <HAL_TIM_OC_Start+0x1e8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_TIM_OC_Start+0x13e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2f      	ldr	r2, [pc, #188]	; (8003794 <HAL_TIM_OC_Start+0x1ec>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_OC_Start+0x13e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2d      	ldr	r2, [pc, #180]	; (8003798 <HAL_TIM_OC_Start+0x1f0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_OC_Start+0x142>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_TIM_OC_Start+0x144>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_TIM_OC_Start+0x1e0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_TIM_OC_Start+0x194>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d013      	beq.n	800373c <HAL_TIM_OC_Start+0x194>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_TIM_OC_Start+0x1f4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_TIM_OC_Start+0x194>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_TIM_OC_Start+0x1f8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIM_OC_Start+0x194>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a17      	ldr	r2, [pc, #92]	; (800378c <HAL_TIM_OC_Start+0x1e4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_OC_Start+0x194>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_TIM_OC_Start+0x1e8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d115      	bne.n	8003768 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_TIM_OC_Start+0x1fc>)
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d015      	beq.n	800377a <HAL_TIM_OC_Start+0x1d2>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d011      	beq.n	800377a <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003766:	e008      	b.n	800377a <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e000      	b.n	800377c <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	00010007 	.word	0x00010007

080037a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e049      	b.n	800384e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f841 	bl	8003856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fbe8 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b02      	cmp	r3, #2
 800387e:	d122      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d11b      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0202 	mvn.w	r2, #2
 8003896:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb66 	bl	8003f7e <HAL_TIM_IC_CaptureCallback>
 80038b2:	e005      	b.n	80038c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb58 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb69 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d122      	bne.n	800391a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d11b      	bne.n	800391a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0204 	mvn.w	r2, #4
 80038ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fb3c 	bl	8003f7e <HAL_TIM_IC_CaptureCallback>
 8003906:	e005      	b.n	8003914 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fb2e 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb3f 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b08      	cmp	r3, #8
 8003926:	d122      	bne.n	800396e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b08      	cmp	r3, #8
 8003934:	d11b      	bne.n	800396e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0208 	mvn.w	r2, #8
 800393e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2204      	movs	r2, #4
 8003944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fb12 	bl	8003f7e <HAL_TIM_IC_CaptureCallback>
 800395a:	e005      	b.n	8003968 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb04 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fb15 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b10      	cmp	r3, #16
 800397a:	d122      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b10      	cmp	r3, #16
 8003988:	d11b      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0210 	mvn.w	r2, #16
 8003992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2208      	movs	r2, #8
 8003998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fae8 	bl	8003f7e <HAL_TIM_IC_CaptureCallback>
 80039ae:	e005      	b.n	80039bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fada 	bl	8003f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 faeb 	bl	8003f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0201 	mvn.w	r2, #1
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fab4 	bl	8003f56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d10e      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 ffff 	bl	8004a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fff2 	bl	8004a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d10e      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa99 	bl	8003fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0220 	mvn.w	r2, #32
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 ffb2 	bl	8004a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e066      	b.n	8003b94 <HAL_TIM_OC_ConfigChannel+0xec>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b14      	cmp	r3, #20
 8003ad2:	d857      	bhi.n	8003b84 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003b85 	.word	0x08003b85
 8003ae4:	08003b85 	.word	0x08003b85
 8003ae8:	08003b85 	.word	0x08003b85
 8003aec:	08003b3f 	.word	0x08003b3f
 8003af0:	08003b85 	.word	0x08003b85
 8003af4:	08003b85 	.word	0x08003b85
 8003af8:	08003b85 	.word	0x08003b85
 8003afc:	08003b4d 	.word	0x08003b4d
 8003b00:	08003b85 	.word	0x08003b85
 8003b04:	08003b85 	.word	0x08003b85
 8003b08:	08003b85 	.word	0x08003b85
 8003b0c:	08003b5b 	.word	0x08003b5b
 8003b10:	08003b85 	.word	0x08003b85
 8003b14:	08003b85 	.word	0x08003b85
 8003b18:	08003b85 	.word	0x08003b85
 8003b1c:	08003b69 	.word	0x08003b69
 8003b20:	08003b85 	.word	0x08003b85
 8003b24:	08003b85 	.word	0x08003b85
 8003b28:	08003b85 	.word	0x08003b85
 8003b2c:	08003b77 	.word	0x08003b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fad0 	bl	80040dc <TIM_OC1_SetConfig>
      break;
 8003b3c:	e025      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fb59 	bl	80041fc <TIM_OC2_SetConfig>
      break;
 8003b4a:	e01e      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fbdc 	bl	8004310 <TIM_OC3_SetConfig>
      break;
 8003b58:	e017      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fc5d 	bl	8004420 <TIM_OC4_SetConfig>
      break;
 8003b66:	e010      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fcc0 	bl	80044f4 <TIM_OC5_SetConfig>
      break;
 8003b74:	e009      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fd1d 	bl	80045bc <TIM_OC6_SetConfig>
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0ff      	b.n	8003dba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b14      	cmp	r3, #20
 8003bc6:	f200 80f0 	bhi.w	8003daa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003c25 	.word	0x08003c25
 8003bd4:	08003dab 	.word	0x08003dab
 8003bd8:	08003dab 	.word	0x08003dab
 8003bdc:	08003dab 	.word	0x08003dab
 8003be0:	08003c65 	.word	0x08003c65
 8003be4:	08003dab 	.word	0x08003dab
 8003be8:	08003dab 	.word	0x08003dab
 8003bec:	08003dab 	.word	0x08003dab
 8003bf0:	08003ca7 	.word	0x08003ca7
 8003bf4:	08003dab 	.word	0x08003dab
 8003bf8:	08003dab 	.word	0x08003dab
 8003bfc:	08003dab 	.word	0x08003dab
 8003c00:	08003ce7 	.word	0x08003ce7
 8003c04:	08003dab 	.word	0x08003dab
 8003c08:	08003dab 	.word	0x08003dab
 8003c0c:	08003dab 	.word	0x08003dab
 8003c10:	08003d29 	.word	0x08003d29
 8003c14:	08003dab 	.word	0x08003dab
 8003c18:	08003dab 	.word	0x08003dab
 8003c1c:	08003dab 	.word	0x08003dab
 8003c20:	08003d69 	.word	0x08003d69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa56 	bl	80040dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0208 	orr.w	r2, r2, #8
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	619a      	str	r2, [r3, #24]
      break;
 8003c62:	e0a5      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fac6 	bl	80041fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6999      	ldr	r1, [r3, #24]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	021a      	lsls	r2, r3, #8
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      break;
 8003ca4:	e084      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fb2f 	bl	8004310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0208 	orr.w	r2, r2, #8
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0204 	bic.w	r2, r2, #4
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
      break;
 8003ce4:	e064      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fb97 	bl	8004420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69d9      	ldr	r1, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	61da      	str	r2, [r3, #28]
      break;
 8003d26:	e043      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fbe0 	bl	80044f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d66:	e023      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc24 	bl	80045bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003da8:	e002      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
      break;
 8003dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop

08003dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0b6      	b.n	8003f4e <HAL_TIM_ConfigClockSource+0x18a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1c:	d03e      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0xd8>
 8003e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e22:	f200 8087 	bhi.w	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	f000 8086 	beq.w	8003f3a <HAL_TIM_ConfigClockSource+0x176>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d87f      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d01a      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xaa>
 8003e38:	2b70      	cmp	r3, #112	; 0x70
 8003e3a:	d87b      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d050      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x11e>
 8003e40:	2b60      	cmp	r3, #96	; 0x60
 8003e42:	d877      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e44:	2b50      	cmp	r3, #80	; 0x50
 8003e46:	d03c      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xfe>
 8003e48:	2b50      	cmp	r3, #80	; 0x50
 8003e4a:	d873      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e4c:	2b40      	cmp	r3, #64	; 0x40
 8003e4e:	d058      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0x13e>
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d86f      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d064      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15e>
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d86b      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d060      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15e>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d867      	bhi.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05c      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15e>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d05a      	beq.n	8003f22 <HAL_TIM_ConfigClockSource+0x15e>
 8003e6c:	e062      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f000 fc7d 	bl	800477c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
      break;
 8003e9a:	e04f      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f000 fc66 	bl	800477c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebe:	609a      	str	r2, [r3, #8]
      break;
 8003ec0:	e03c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f000 fbda 	bl	8004688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2150      	movs	r1, #80	; 0x50
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fc33 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8003ee0:	e02c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f000 fbf9 	bl	80046e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2160      	movs	r1, #96	; 0x60
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fc23 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8003f00:	e01c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f000 fbba 	bl	8004688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fc13 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e00c      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f000 fc0a 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8003f32:	e003      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e000      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <TIM_Base_SetConfig+0x104>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a39      	ldr	r2, [pc, #228]	; (80040c4 <TIM_Base_SetConfig+0x108>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a38      	ldr	r2, [pc, #224]	; (80040c8 <TIM_Base_SetConfig+0x10c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a37      	ldr	r2, [pc, #220]	; (80040cc <TIM_Base_SetConfig+0x110>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <TIM_Base_SetConfig+0x104>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d01b      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d017      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <TIM_Base_SetConfig+0x108>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <TIM_Base_SetConfig+0x10c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00f      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <TIM_Base_SetConfig+0x110>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <TIM_Base_SetConfig+0x114>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_Base_SetConfig+0x118>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0x11c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <TIM_Base_SetConfig+0x104>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a11      	ldr	r2, [pc, #68]	; (80040cc <TIM_Base_SetConfig+0x110>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <TIM_Base_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <TIM_Base_SetConfig+0x118>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0xe8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <TIM_Base_SetConfig+0x11c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	f023 0201 	bic.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <TIM_OC1_SetConfig+0x10c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <TIM_OC1_SetConfig+0x110>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <TIM_OC1_SetConfig+0x114>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <TIM_OC1_SetConfig+0x118>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC1_SetConfig+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <TIM_OC1_SetConfig+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10c      	bne.n	8004176 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0308 	bic.w	r3, r3, #8
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <TIM_OC1_SetConfig+0x10c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <TIM_OC1_SetConfig+0x110>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <TIM_OC1_SetConfig+0x114>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <TIM_OC1_SetConfig+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC1_SetConfig+0xc2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <TIM_OC1_SetConfig+0x11c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d111      	bne.n	80041c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800

080041fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0210 	bic.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0320 	bic.w	r3, r3, #32
 800424a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a28      	ldr	r2, [pc, #160]	; (80042fc <TIM_OC2_SetConfig+0x100>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_OC2_SetConfig+0x6c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a27      	ldr	r2, [pc, #156]	; (8004300 <TIM_OC2_SetConfig+0x104>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10d      	bne.n	8004284 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_OC2_SetConfig+0x100>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <TIM_OC2_SetConfig+0x104>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <TIM_OC2_SetConfig+0x108>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d007      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <TIM_OC2_SetConfig+0x10c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC2_SetConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a19      	ldr	r2, [pc, #100]	; (800430c <TIM_OC2_SetConfig+0x110>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d113      	bne.n	80042d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800435c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <TIM_OC3_SetConfig+0xfc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d003      	beq.n	800437a <TIM_OC3_SetConfig+0x6a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_OC3_SetConfig+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10d      	bne.n	8004396 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004394:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1c      	ldr	r2, [pc, #112]	; (800440c <TIM_OC3_SetConfig+0xfc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <TIM_OC3_SetConfig+0x100>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <TIM_OC3_SetConfig+0x104>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <TIM_OC3_SetConfig+0x108>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_OC3_SetConfig+0xae>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <TIM_OC3_SetConfig+0x10c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d113      	bne.n	80043e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800

08004420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800446e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	031b      	lsls	r3, r3, #12
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <TIM_OC4_SetConfig+0xc0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00f      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <TIM_OC4_SetConfig+0xc4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <TIM_OC4_SetConfig+0xc8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC4_SetConfig+0xcc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_OC4_SetConfig+0x84>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <TIM_OC4_SetConfig+0xd0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40014400 	.word	0x40014400
 80044f0:	40014800 	.word	0x40014800

080044f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <TIM_OC5_SetConfig+0xb4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00f      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC5_SetConfig+0xb8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <TIM_OC5_SetConfig+0xbc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <TIM_OC5_SetConfig+0xc0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_OC5_SetConfig+0x7a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <TIM_OC5_SetConfig+0xc4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d109      	bne.n	8004582 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	051b      	lsls	r3, r3, #20
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <TIM_OC6_SetConfig+0xb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a17      	ldr	r2, [pc, #92]	; (8004678 <TIM_OC6_SetConfig+0xbc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <TIM_OC6_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC6_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_OC6_SetConfig+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC6_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d109      	bne.n	800464c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 030a 	bic.w	r3, r3, #10
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	431a      	orrs	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e063      	b.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d108      	bne.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800485a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d018      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d013      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00e      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d009      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d004      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d10c      	bne.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40013400 	.word	0x40013400
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40014000 	.word	0x40014000

08004908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004920:	2302      	movs	r3, #2
 8004922:	e065      	b.n	80049f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a16      	ldr	r2, [pc, #88]	; (80049fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d004      	beq.n	80049b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d115      	bne.n	80049de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	051b      	lsls	r3, r3, #20
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40013400 	.word	0x40013400

08004a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4d0d      	ldr	r5, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	42a6      	cmp	r6, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4d0b      	ldr	r5, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f000 f820 	bl	8004a98 <_init>
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	42a6      	cmp	r6, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a68:	4798      	blx	r3
 8004a6a:	3601      	adds	r6, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a72:	4798      	blx	r3
 8004a74:	3601      	adds	r6, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08004ae0 	.word	0x08004ae0
 8004a7c:	08004ae0 	.word	0x08004ae0
 8004a80:	08004ae0 	.word	0x08004ae0
 8004a84:	08004ae8 	.word	0x08004ae8

08004a88 <memset>:
 8004a88:	4402      	add	r2, r0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <_init>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_fini>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr
